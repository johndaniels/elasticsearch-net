
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Linq.Expressions;
using Elasticsearch.Net;

///This file contains all the typed querystring parameters that are generated of the client spec.
///This file is automatically generated from https://github.com/elasticsearch/elasticsearch-rest-api-spec
///Generated of commit 

namespace Nest
{

		
	///<summary>Request parameters for AbortBenchmark
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html
	///</pre>
	///</summary>
	public partial class AbortBenchmarkRequest  : BasePathRequest<AbortBenchmarkRequestParameters>
			{

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<AbortBenchmarkRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}

	}
	
		
	///<summary>Request parameters for Bulk
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html
	///</pre>
	///</summary>
	public partial class BulkRequest 
			{
		
		///<summary>Explicit write consistency setting for the operation</summary>
		public Consistency Consistency 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<Consistency>("consistency"); } 
			set { this.Request.RequestParameters.AddQueryString("consistency", value); }
		}
		
		
		///<summary>Refresh the index after performing the operation</summary>
		public bool Refresh 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("refresh"); } 
			set { this.Request.RequestParameters.AddQueryString("refresh", value); }
		}
		
		
		///<summary>Explicitely set the replication type</summary>
		public Replication Replication 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<Replication>("replication"); } 
			set { this.Request.RequestParameters.AddQueryString("replication", value); }
		}
		
		
		///<summary>Specific routing value</summary>
		public string Routing 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("routing"); } 
			set { this.Request.RequestParameters.AddQueryString("routing", value); }
		}
		
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("timeout", value); }
		}
		
		
		///<summary>Default document type for items which don&#39;t provide one</summary>
		public string TypeQueryString 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("type"); } 
			set { this.Request.RequestParameters.AddQueryString("type", value); }
		}
		
	}
	
		
	///<summary>Request parameters for CatAliases
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-aliases.html
	///</pre>
	///</summary>
	public partial class CatAliasesRequest  : BasePathRequest<CatAliasesRequestParameters>
			{
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("local"); } 
			set { this.Request.RequestParameters.AddQueryString("local", value); }
		}
		
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
		
		///<summary>Comma-separated list of column names to display</summary>
		public  string[] H 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("h"); } 
			set { this.Request.RequestParameters.AddQueryString("h", value); }
		}
		
		
		///<summary>Return help information</summary>
		public bool Help 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("help"); } 
			set { this.Request.RequestParameters.AddQueryString("help", value); }
		}
		
		
		///<summary>Verbose mode. Display column headers</summary>
		public bool V 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("v"); } 
			set { this.Request.RequestParameters.AddQueryString("v", value); }
		}
		

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<CatAliasesRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}

	}
	
		
	///<summary>Request parameters for CatAllocation
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-allocation.html
	///</pre>
	///</summary>
	public partial class CatAllocationRequest  : BasePathRequest<CatAllocationRequestParameters>
			{
		
		///<summary>The unit in which to display byte values</summary>
		public Bytes Bytes 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<Bytes>("bytes"); } 
			set { this.Request.RequestParameters.AddQueryString("bytes", value); }
		}
		
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("local"); } 
			set { this.Request.RequestParameters.AddQueryString("local", value); }
		}
		
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
		
		///<summary>Comma-separated list of column names to display</summary>
		public  string[] H 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("h"); } 
			set { this.Request.RequestParameters.AddQueryString("h", value); }
		}
		
		
		///<summary>Return help information</summary>
		public bool Help 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("help"); } 
			set { this.Request.RequestParameters.AddQueryString("help", value); }
		}
		
		
		///<summary>Verbose mode. Display column headers</summary>
		public bool V 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("v"); } 
			set { this.Request.RequestParameters.AddQueryString("v", value); }
		}
		

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<CatAllocationRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}

	}
	
		
	///<summary>Request parameters for CatCount
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-count.html
	///</pre>
	///</summary>
	public partial class CatCountRequest  : BasePathRequest<CatCountRequestParameters>
			{
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("local"); } 
			set { this.Request.RequestParameters.AddQueryString("local", value); }
		}
		
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
		
		///<summary>Comma-separated list of column names to display</summary>
		public  string[] H 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("h"); } 
			set { this.Request.RequestParameters.AddQueryString("h", value); }
		}
		
		
		///<summary>Return help information</summary>
		public bool Help 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("help"); } 
			set { this.Request.RequestParameters.AddQueryString("help", value); }
		}
		
		
		///<summary>Verbose mode. Display column headers</summary>
		public bool V 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("v"); } 
			set { this.Request.RequestParameters.AddQueryString("v", value); }
		}
		

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<CatCountRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}

	}
	
		
	///<summary>Request parameters for CatFielddata
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-fielddata.html
	///</pre>
	///</summary>
	public partial class CatFielddataRequest  : BasePathRequest<CatFielddataRequestParameters>
			{
		
		///<summary>The unit in which to display byte values</summary>
		public Bytes Bytes 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<Bytes>("bytes"); } 
			set { this.Request.RequestParameters.AddQueryString("bytes", value); }
		}
		
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("local"); } 
			set { this.Request.RequestParameters.AddQueryString("local", value); }
		}
		
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
		
		///<summary>Comma-separated list of column names to display</summary>
		public  string[] H 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("h"); } 
			set { this.Request.RequestParameters.AddQueryString("h", value); }
		}
		
		
		///<summary>Return help information</summary>
		public bool Help 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("help"); } 
			set { this.Request.RequestParameters.AddQueryString("help", value); }
		}
		
		
		///<summary>Verbose mode. Display column headers</summary>
		public bool V 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("v"); } 
			set { this.Request.RequestParameters.AddQueryString("v", value); }
		}
		
		
		///<summary>A comma-separated list of fields to return the fielddata size</summary>
		public IList<PropertyPathMarker> Fields 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<IList<PropertyPathMarker>>("fields"); } 
			set { this.Request.RequestParameters.AddQueryString("fields", value); }
		}
		

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<CatFielddataRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}

	}
	
		
	///<summary>Request parameters for CatHealth
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-health.html
	///</pre>
	///</summary>
	public partial class CatHealthRequest  : BasePathRequest<CatHealthRequestParameters>
			{
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("local"); } 
			set { this.Request.RequestParameters.AddQueryString("local", value); }
		}
		
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
		
		///<summary>Comma-separated list of column names to display</summary>
		public  string[] H 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("h"); } 
			set { this.Request.RequestParameters.AddQueryString("h", value); }
		}
		
		
		///<summary>Return help information</summary>
		public bool Help 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("help"); } 
			set { this.Request.RequestParameters.AddQueryString("help", value); }
		}
		
		
		///<summary>Set to false to disable timestamping</summary>
		public bool Ts 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ts"); } 
			set { this.Request.RequestParameters.AddQueryString("ts", value); }
		}
		
		
		///<summary>Verbose mode. Display column headers</summary>
		public bool V 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("v"); } 
			set { this.Request.RequestParameters.AddQueryString("v", value); }
		}
		

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<CatHealthRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}

	}
	
		
	///<summary>Request parameters for CatHelp
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat.html
	///</pre>
	///</summary>
	public partial class CatHelpRequest  : BasePathRequest<CatHelpRequestParameters>
			{
		
		///<summary>Return help information</summary>
		public bool Help 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("help"); } 
			set { this.Request.RequestParameters.AddQueryString("help", value); }
		}
		

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<CatHelpRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}

	}
	
		
	///<summary>Request parameters for CatIndices
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-indices.html
	///</pre>
	///</summary>
	public partial class CatIndicesRequest  : BasePathRequest<CatIndicesRequestParameters>
			{
		
		///<summary>The unit in which to display byte values</summary>
		public Bytes Bytes 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<Bytes>("bytes"); } 
			set { this.Request.RequestParameters.AddQueryString("bytes", value); }
		}
		
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("local"); } 
			set { this.Request.RequestParameters.AddQueryString("local", value); }
		}
		
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
		
		///<summary>Comma-separated list of column names to display</summary>
		public  string[] H 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("h"); } 
			set { this.Request.RequestParameters.AddQueryString("h", value); }
		}
		
		
		///<summary>Return help information</summary>
		public bool Help 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("help"); } 
			set { this.Request.RequestParameters.AddQueryString("help", value); }
		}
		
		
		///<summary>Set to true to return stats only for primary shards</summary>
		public bool Pri 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("pri"); } 
			set { this.Request.RequestParameters.AddQueryString("pri", value); }
		}
		
		
		///<summary>Verbose mode. Display column headers</summary>
		public bool V 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("v"); } 
			set { this.Request.RequestParameters.AddQueryString("v", value); }
		}
		

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<CatIndicesRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}

	}
	
		
	///<summary>Request parameters for CatMaster
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-master.html
	///</pre>
	///</summary>
	public partial class CatMasterRequest  : BasePathRequest<CatMasterRequestParameters>
			{
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("local"); } 
			set { this.Request.RequestParameters.AddQueryString("local", value); }
		}
		
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
		
		///<summary>Comma-separated list of column names to display</summary>
		public  string[] H 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("h"); } 
			set { this.Request.RequestParameters.AddQueryString("h", value); }
		}
		
		
		///<summary>Return help information</summary>
		public bool Help 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("help"); } 
			set { this.Request.RequestParameters.AddQueryString("help", value); }
		}
		
		
		///<summary>Verbose mode. Display column headers</summary>
		public bool V 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("v"); } 
			set { this.Request.RequestParameters.AddQueryString("v", value); }
		}
		

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<CatMasterRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}

	}
	
		
	///<summary>Request parameters for CatNodes
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-nodes.html
	///</pre>
	///</summary>
	public partial class CatNodesRequest  : BasePathRequest<CatNodesRequestParameters>
			{
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("local"); } 
			set { this.Request.RequestParameters.AddQueryString("local", value); }
		}
		
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
		
		///<summary>Comma-separated list of column names to display</summary>
		public  string[] H 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("h"); } 
			set { this.Request.RequestParameters.AddQueryString("h", value); }
		}
		
		
		///<summary>Return help information</summary>
		public bool Help 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("help"); } 
			set { this.Request.RequestParameters.AddQueryString("help", value); }
		}
		
		
		///<summary>Verbose mode. Display column headers</summary>
		public bool V 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("v"); } 
			set { this.Request.RequestParameters.AddQueryString("v", value); }
		}
		

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<CatNodesRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}

	}
	
		
	///<summary>Request parameters for CatPendingTasks
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-pending-tasks.html
	///</pre>
	///</summary>
	public partial class CatPendingTasksRequest  : BasePathRequest<CatPendingTasksRequestParameters>
			{
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("local"); } 
			set { this.Request.RequestParameters.AddQueryString("local", value); }
		}
		
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
		
		///<summary>Comma-separated list of column names to display</summary>
		public  string[] H 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("h"); } 
			set { this.Request.RequestParameters.AddQueryString("h", value); }
		}
		
		
		///<summary>Return help information</summary>
		public bool Help 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("help"); } 
			set { this.Request.RequestParameters.AddQueryString("help", value); }
		}
		
		
		///<summary>Verbose mode. Display column headers</summary>
		public bool V 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("v"); } 
			set { this.Request.RequestParameters.AddQueryString("v", value); }
		}
		

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<CatPendingTasksRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}

	}
	
		
	///<summary>Request parameters for CatPlugins
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-plugins.html
	///</pre>
	///</summary>
	public partial class CatPluginsRequest  : BasePathRequest<CatPluginsRequestParameters>
			{
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("local"); } 
			set { this.Request.RequestParameters.AddQueryString("local", value); }
		}
		
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
		
		///<summary>Comma-separated list of column names to display</summary>
		public  string[] H 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("h"); } 
			set { this.Request.RequestParameters.AddQueryString("h", value); }
		}
		
		
		///<summary>Return help information</summary>
		public bool Help 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("help"); } 
			set { this.Request.RequestParameters.AddQueryString("help", value); }
		}
		
		
		///<summary>Verbose mode. Display column headers</summary>
		public bool V 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("v"); } 
			set { this.Request.RequestParameters.AddQueryString("v", value); }
		}
		

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<CatPluginsRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}

	}
	
		
	///<summary>Request parameters for CatRecovery
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-recovery.html
	///</pre>
	///</summary>
	public partial class CatRecoveryRequest  : BasePathRequest<CatRecoveryRequestParameters>
			{
		
		///<summary>The unit in which to display byte values</summary>
		public Bytes Bytes 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<Bytes>("bytes"); } 
			set { this.Request.RequestParameters.AddQueryString("bytes", value); }
		}
		
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
		
		///<summary>Comma-separated list of column names to display</summary>
		public  string[] H 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("h"); } 
			set { this.Request.RequestParameters.AddQueryString("h", value); }
		}
		
		
		///<summary>Return help information</summary>
		public bool Help 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("help"); } 
			set { this.Request.RequestParameters.AddQueryString("help", value); }
		}
		
		
		///<summary>Verbose mode. Display column headers</summary>
		public bool V 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("v"); } 
			set { this.Request.RequestParameters.AddQueryString("v", value); }
		}
		

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<CatRecoveryRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}

	}
	
		
	///<summary>Request parameters for CatShards
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-shards.html
	///</pre>
	///</summary>
	public partial class CatShardsRequest  : BasePathRequest<CatShardsRequestParameters>
			{
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("local"); } 
			set { this.Request.RequestParameters.AddQueryString("local", value); }
		}
		
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
		
		///<summary>Comma-separated list of column names to display</summary>
		public  string[] H 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("h"); } 
			set { this.Request.RequestParameters.AddQueryString("h", value); }
		}
		
		
		///<summary>Return help information</summary>
		public bool Help 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("help"); } 
			set { this.Request.RequestParameters.AddQueryString("help", value); }
		}
		
		
		///<summary>Verbose mode. Display column headers</summary>
		public bool V 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("v"); } 
			set { this.Request.RequestParameters.AddQueryString("v", value); }
		}
		

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<CatShardsRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}

	}
	
		
	///<summary>Request parameters for CatThreadPool
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-thread-pool.html
	///</pre>
	///</summary>
	public partial class CatThreadPoolRequest  : BasePathRequest<CatThreadPoolRequestParameters>
			{
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("local"); } 
			set { this.Request.RequestParameters.AddQueryString("local", value); }
		}
		
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
		
		///<summary>Comma-separated list of column names to display</summary>
		public  string[] H 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("h"); } 
			set { this.Request.RequestParameters.AddQueryString("h", value); }
		}
		
		
		///<summary>Return help information</summary>
		public bool Help 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("help"); } 
			set { this.Request.RequestParameters.AddQueryString("help", value); }
		}
		
		
		///<summary>Verbose mode. Display column headers</summary>
		public bool V 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("v"); } 
			set { this.Request.RequestParameters.AddQueryString("v", value); }
		}
		
		
		///<summary>Enables displaying the complete node ids</summary>
		public bool FullId 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("full_id"); } 
			set { this.Request.RequestParameters.AddQueryString("full_id", value); }
		}
		

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<CatThreadPoolRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}

	}
	
		
	///<summary>Request parameters for ClearScroll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html
	///</pre>
	///</summary>
	public partial class ClearScrollRequest 
			{
	}
	
		
	///<summary>Request parameters for ClusterGetSettings
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-update-settings.html
	///</pre>
	///</summary>
	public partial class ClusterGetSettingsRequest 
			{
		
		///<summary>Return settings in flat format (default: false)</summary>
		public bool FlatSettings 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("flat_settings"); } 
			set { this.Request.RequestParameters.AddQueryString("flat_settings", value); }
		}
		
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("timeout", value); }
		}
		
	}
	
		
	///<summary>Request parameters for ClusterHealth
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-health.html
	///</pre>
	///</summary>
	public partial class ClusterHealthRequest 
			{
		
		///<summary>Specify the level of detail for returned information</summary>
		public Level Level 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<Level>("level"); } 
			set { this.Request.RequestParameters.AddQueryString("level", value); }
		}
		
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("local"); } 
			set { this.Request.RequestParameters.AddQueryString("local", value); }
		}
		
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("timeout", value); }
		}
		
		
		///<summary>Wait until the specified number of shards is active</summary>
		public long WaitForActiveShards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<long>("wait_for_active_shards"); } 
			set { this.Request.RequestParameters.AddQueryString("wait_for_active_shards", value); }
		}
		
		
		///<summary>Wait until the specified number of nodes is available</summary>
		public string WaitForNodes 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("wait_for_nodes"); } 
			set { this.Request.RequestParameters.AddQueryString("wait_for_nodes", value); }
		}
		
		
		///<summary>Wait until the specified number of relocating shards is finished</summary>
		public long WaitForRelocatingShards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<long>("wait_for_relocating_shards"); } 
			set { this.Request.RequestParameters.AddQueryString("wait_for_relocating_shards", value); }
		}
		
		
		///<summary>Wait until cluster is in a specific state</summary>
		public WaitForStatus WaitForStatus 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<WaitForStatus>("wait_for_status"); } 
			set { this.Request.RequestParameters.AddQueryString("wait_for_status", value); }
		}
		
	}
	
		
	///<summary>Request parameters for ClusterPendingTasks
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-pending.html
	///</pre>
	///</summary>
	public partial class ClusterPendingTasksRequest  : BasePathRequest<ClusterPendingTasksRequestParameters>
			{
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("local"); } 
			set { this.Request.RequestParameters.AddQueryString("local", value); }
		}
		
		
		///<summary>Specify timeout for connection to master</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<ClusterPendingTasksRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}

	}
	
		
	///<summary>Request parameters for ClusterPutSettings
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-update-settings.html
	///</pre>
	///</summary>
	public partial class ClusterSettingsRequest 
			{
		
		///<summary>Return settings in flat format (default: false)</summary>
		public bool FlatSettings 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("flat_settings"); } 
			set { this.Request.RequestParameters.AddQueryString("flat_settings", value); }
		}
		
	}
	
		
	///<summary>Request parameters for ClusterReroute
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-reroute.html
	///</pre>
	///</summary>
	public partial class ClusterRerouteRequest  : BasePathRequest<ClusterRerouteRequestParameters>
			{
		
		///<summary>Simulate the operation only and return the resulting state</summary>
		public bool DryRun 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("dry_run"); } 
			set { this.Request.RequestParameters.AddQueryString("dry_run", value); }
		}
		
		
		///<summary>Return an explanation of why the commands can or cannot be executed</summary>
		public bool Explain 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("explain"); } 
			set { this.Request.RequestParameters.AddQueryString("explain", value); }
		}
		
		
		///<summary>Don&#39;t return cluster state metadata (default: false)</summary>
		public bool FilterMetadata 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("filter_metadata"); } 
			set { this.Request.RequestParameters.AddQueryString("filter_metadata", value); }
		}
		
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("timeout", value); }
		}
		

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<ClusterRerouteRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}

	}
	
		
	///<summary>Request parameters for ClusterState
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-state.html
	///</pre>
	///</summary>
	public partial class ClusterStateRequest 
			{
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("local"); } 
			set { this.Request.RequestParameters.AddQueryString("local", value); }
		}
		
		
		///<summary>Specify timeout for connection to master</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
		
		///<summary>Return settings in flat format (default: false)</summary>
		public bool FlatSettings 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("flat_settings"); } 
			set { this.Request.RequestParameters.AddQueryString("flat_settings", value); }
		}
		
	}
	
		
	///<summary>Request parameters for ClusterStats
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-stats.html
	///</pre>
	///</summary>
	public partial class ClusterStatsRequest  : BasePathRequest<ClusterStatsRequestParameters>
			{
		
		///<summary>Return settings in flat format (default: false)</summary>
		public bool FlatSettings 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("flat_settings"); } 
			set { this.Request.RequestParameters.AddQueryString("flat_settings", value); }
		}
		
		
		///<summary>Whether to return time and byte values in human-readable format.</summary>
		public bool Human 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("human"); } 
			set { this.Request.RequestParameters.AddQueryString("human", value); }
		}
		

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<ClusterStatsRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}

	}
	
		
	///<summary>Request parameters for Count
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html
	///</pre>
	///</summary>
	public partial class CountRequest<T> 
			{
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_unavailable"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_unavailable", value); }
		}
		
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("allow_no_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("allow_no_indices", value); }
		}
		
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ExpandWildcards>("expand_wildcards"); } 
			set { this.Request.RequestParameters.AddQueryString("expand_wildcards", value); }
		}
		
		
		///<summary>Include only documents with a specific `_score` value in the result</summary>
		public double MinScore 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<double>("min_score"); } 
			set { this.Request.RequestParameters.AddQueryString("min_score", value); }
		}
		
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("preference"); } 
			set { this.Request.RequestParameters.AddQueryString("preference", value); }
		}
		
		
		///<summary>Specific routing value</summary>
		public string Routing 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("routing"); } 
			set { this.Request.RequestParameters.AddQueryString("routing", value); }
		}
		
		
		///<summary>The URL-encoded query definition (instead of using the request body)</summary>
		public string Source 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("source"); } 
			set { this.Request.RequestParameters.AddQueryString("source", value); }
		}
		
	}
	
		
	///<summary>Request parameters for CountPercolateGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html
	///</pre>
	///</summary>
	public partial class PercolateCountRequest<TDocument> 
			{
		
		///<summary>A comma-separated list of specific routing values</summary>
		public  string[] Routing 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("routing"); } 
			set { this.Request.RequestParameters.AddQueryString("routing", value); }
		}
		
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("preference"); } 
			set { this.Request.RequestParameters.AddQueryString("preference", value); }
		}
		
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_unavailable"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_unavailable", value); }
		}
		
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("allow_no_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("allow_no_indices", value); }
		}
		
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ExpandWildcards>("expand_wildcards"); } 
			set { this.Request.RequestParameters.AddQueryString("expand_wildcards", value); }
		}
		
		
		///<summary>The index to count percolate the document into. Defaults to index.</summary>
		public string PercolateIndex 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("percolate_index"); } 
			set { this.Request.RequestParameters.AddQueryString("percolate_index", value); }
		}
		
		
		///<summary>The type to count percolate document into. Defaults to type.</summary>
		public string PercolateType 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("percolate_type"); } 
			set { this.Request.RequestParameters.AddQueryString("percolate_type", value); }
		}
		
		
		///<summary>Explicit version number for concurrency control</summary>
		public long Version 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<long>("version"); } 
			set { this.Request.RequestParameters.AddQueryString("version", value); }
		}
		
		
		///<summary>Specific version type</summary>
		public VersionType VersionType 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<VersionType>("version_type"); } 
			set { this.Request.RequestParameters.AddQueryString("version_type", value); }
		}
		
	}
	
		
	///<summary>Request parameters for Delete
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete.html
	///</pre>
	///</summary>
	public partial class DeleteRequest<T> 
			{
		
		///<summary>Specific write consistency setting for the operation</summary>
		public Consistency Consistency 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<Consistency>("consistency"); } 
			set { this.Request.RequestParameters.AddQueryString("consistency", value); }
		}
		
		
		///<summary>ID of parent document</summary>
		public string Parent 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("parent"); } 
			set { this.Request.RequestParameters.AddQueryString("parent", value); }
		}
		
		
		///<summary>Refresh the index after performing the operation</summary>
		public bool Refresh 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("refresh"); } 
			set { this.Request.RequestParameters.AddQueryString("refresh", value); }
		}
		
		
		///<summary>Specific replication type</summary>
		public Replication Replication 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<Replication>("replication"); } 
			set { this.Request.RequestParameters.AddQueryString("replication", value); }
		}
		
		
		///<summary>Specific routing value</summary>
		public string Routing 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("routing"); } 
			set { this.Request.RequestParameters.AddQueryString("routing", value); }
		}
		
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("timeout", value); }
		}
		
		
		///<summary>Explicit version number for concurrency control</summary>
		public long Version 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<long>("version"); } 
			set { this.Request.RequestParameters.AddQueryString("version", value); }
		}
		
		
		///<summary>Specific version type</summary>
		public VersionType VersionType 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<VersionType>("version_type"); } 
			set { this.Request.RequestParameters.AddQueryString("version_type", value); }
		}
		
	}
	
		
	///<summary>Request parameters for DeleteByQuery
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete-by-query.html
	///</pre>
	///</summary>
	public partial class DeleteByQueryRequest<T> 
			{
		
		///<summary>The analyzer to use for the query string</summary>
		public string Analyzer 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("analyzer"); } 
			set { this.Request.RequestParameters.AddQueryString("analyzer", value); }
		}
		
		
		///<summary>Specific write consistency setting for the operation</summary>
		public Consistency Consistency 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<Consistency>("consistency"); } 
			set { this.Request.RequestParameters.AddQueryString("consistency", value); }
		}
		
		
		///<summary>The default operator for query string query (AND or OR)</summary>
		public DefaultOperator DefaultOperator 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<DefaultOperator>("default_operator"); } 
			set { this.Request.RequestParameters.AddQueryString("default_operator", value); }
		}
		
		
		///<summary>The field to use as default where no field prefix is given in the query string</summary>
		public string Df 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("df"); } 
			set { this.Request.RequestParameters.AddQueryString("df", value); }
		}
		
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_unavailable"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_unavailable", value); }
		}
		
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("allow_no_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("allow_no_indices", value); }
		}
		
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ExpandWildcards>("expand_wildcards"); } 
			set { this.Request.RequestParameters.AddQueryString("expand_wildcards", value); }
		}
		
		
		///<summary>Specific replication type</summary>
		public Replication Replication 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<Replication>("replication"); } 
			set { this.Request.RequestParameters.AddQueryString("replication", value); }
		}
		
		
		///<summary>Query in the Lucene query string syntax</summary>
		public string Q 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("q"); } 
			set { this.Request.RequestParameters.AddQueryString("q", value); }
		}
		
		
		///<summary>Specific routing value</summary>
		public string Routing 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("routing"); } 
			set { this.Request.RequestParameters.AddQueryString("routing", value); }
		}
		
		
		///<summary>The URL-encoded query definition (instead of using the request body)</summary>
		public string Source 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("source"); } 
			set { this.Request.RequestParameters.AddQueryString("source", value); }
		}
		
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("timeout", value); }
		}
		
	}
	
		
	///<summary>Request parameters for Exists
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html
	///</pre>
	///</summary>
	public partial class DocumentExistsRequest<T> 
			{
		
		///<summary>The ID of the parent document</summary>
		public string Parent 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("parent"); } 
			set { this.Request.RequestParameters.AddQueryString("parent", value); }
		}
		
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("preference"); } 
			set { this.Request.RequestParameters.AddQueryString("preference", value); }
		}
		
		
		///<summary>Specify whether to perform the operation in realtime or search mode</summary>
		public bool Realtime 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("realtime"); } 
			set { this.Request.RequestParameters.AddQueryString("realtime", value); }
		}
		
		
		///<summary>Refresh the shard containing the document before performing the operation</summary>
		public bool Refresh 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("refresh"); } 
			set { this.Request.RequestParameters.AddQueryString("refresh", value); }
		}
		
		
		///<summary>Specific routing value</summary>
		public string Routing 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("routing"); } 
			set { this.Request.RequestParameters.AddQueryString("routing", value); }
		}
		
	}
	
		
	///<summary>Request parameters for ExplainGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-explain.html
	///</pre>
	///</summary>
	public partial class ExplainRequest  : BasePathRequest<ExplainRequestParameters>
			{
		
		///<summary>Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)</summary>
		public bool AnalyzeWildcard 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("analyze_wildcard"); } 
			set { this.Request.RequestParameters.AddQueryString("analyze_wildcard", value); }
		}
		
		
		///<summary>The analyzer for the query string query</summary>
		public string Analyzer 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("analyzer"); } 
			set { this.Request.RequestParameters.AddQueryString("analyzer", value); }
		}
		
		
		///<summary>The default operator for query string query (AND or OR)</summary>
		public DefaultOperator DefaultOperator 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<DefaultOperator>("default_operator"); } 
			set { this.Request.RequestParameters.AddQueryString("default_operator", value); }
		}
		
		
		///<summary>The default field for query string query (default: _all)</summary>
		public string Df 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("df"); } 
			set { this.Request.RequestParameters.AddQueryString("df", value); }
		}
		
		
		///<summary>A comma-separated list of fields to return in the response</summary>
		public IList<PropertyPathMarker> Fields 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<IList<PropertyPathMarker>>("fields"); } 
			set { this.Request.RequestParameters.AddQueryString("fields", value); }
		}
		
		
		///<summary>Specify whether format-based query failures (such as providing text to a numeric field) should be ignored</summary>
		public bool Lenient 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("lenient"); } 
			set { this.Request.RequestParameters.AddQueryString("lenient", value); }
		}
		
		
		///<summary>Specify whether query terms should be lowercased</summary>
		public bool LowercaseExpandedTerms 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("lowercase_expanded_terms"); } 
			set { this.Request.RequestParameters.AddQueryString("lowercase_expanded_terms", value); }
		}
		
		
		///<summary>The ID of the parent document</summary>
		public string Parent 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("parent"); } 
			set { this.Request.RequestParameters.AddQueryString("parent", value); }
		}
		
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("preference"); } 
			set { this.Request.RequestParameters.AddQueryString("preference", value); }
		}
		
		
		///<summary>Query in the Lucene query string syntax</summary>
		public string Q 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("q"); } 
			set { this.Request.RequestParameters.AddQueryString("q", value); }
		}
		
		
		///<summary>Specific routing value</summary>
		public string Routing 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("routing"); } 
			set { this.Request.RequestParameters.AddQueryString("routing", value); }
		}
		
		
		///<summary>The URL-encoded query definition (instead of using the request body)</summary>
		public string Source 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("source"); } 
			set { this.Request.RequestParameters.AddQueryString("source", value); }
		}
		
		
		///<summary>True or false to return the _source field or not, or a list of fields to return</summary>
		public  string[] _Source 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("_source"); } 
			set { this.Request.RequestParameters.AddQueryString("_source", value); }
		}
		
		
		///<summary>A list of fields to exclude from the returned _source field</summary>
		public IList<PropertyPathMarker> _SourceExclude 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<IList<PropertyPathMarker>>("_source_exclude"); } 
			set { this.Request.RequestParameters.AddQueryString("_source_exclude", value); }
		}
		
		
		///<summary>A list of fields to extract and return from the _source field</summary>
		public IList<PropertyPathMarker> _SourceInclude 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<IList<PropertyPathMarker>>("_source_include"); } 
			set { this.Request.RequestParameters.AddQueryString("_source_include", value); }
		}
		

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<ExplainRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}

	}
	
		
	///<summary>Request parameters for Get
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html
	///</pre>
	///</summary>
	public partial class GetRequest<T> 
			{
		
		///<summary>A comma-separated list of fields to return in the response</summary>
		public IList<PropertyPathMarker> Fields 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<IList<PropertyPathMarker>>("fields"); } 
			set { this.Request.RequestParameters.AddQueryString("fields", value); }
		}
		
		
		///<summary>The ID of the parent document</summary>
		public string Parent 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("parent"); } 
			set { this.Request.RequestParameters.AddQueryString("parent", value); }
		}
		
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("preference"); } 
			set { this.Request.RequestParameters.AddQueryString("preference", value); }
		}
		
		
		///<summary>Specify whether to perform the operation in realtime or search mode</summary>
		public bool Realtime 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("realtime"); } 
			set { this.Request.RequestParameters.AddQueryString("realtime", value); }
		}
		
		
		///<summary>Refresh the shard containing the document before performing the operation</summary>
		public bool Refresh 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("refresh"); } 
			set { this.Request.RequestParameters.AddQueryString("refresh", value); }
		}
		
		
		///<summary>Specific routing value</summary>
		public string Routing 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("routing"); } 
			set { this.Request.RequestParameters.AddQueryString("routing", value); }
		}
		
		
		///<summary>True or false to return the _source field or not, or a list of fields to return</summary>
		public  string[] _Source 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("_source"); } 
			set { this.Request.RequestParameters.AddQueryString("_source", value); }
		}
		
		
		///<summary>A list of fields to exclude from the returned _source field</summary>
		public IList<PropertyPathMarker> _SourceExclude 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<IList<PropertyPathMarker>>("_source_exclude"); } 
			set { this.Request.RequestParameters.AddQueryString("_source_exclude", value); }
		}
		
		
		///<summary>A list of fields to extract and return from the _source field</summary>
		public IList<PropertyPathMarker> _SourceInclude 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<IList<PropertyPathMarker>>("_source_include"); } 
			set { this.Request.RequestParameters.AddQueryString("_source_include", value); }
		}
		
		
		///<summary>Explicit version number for concurrency control</summary>
		public long Version 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<long>("version"); } 
			set { this.Request.RequestParameters.AddQueryString("version", value); }
		}
		
		
		///<summary>Specific version type</summary>
		public VersionType VersionType 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<VersionType>("version_type"); } 
			set { this.Request.RequestParameters.AddQueryString("version_type", value); }
		}
		
	}
	
		
	///<summary>Request parameters for GetSource
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html
	///</pre>
	///</summary>
	public partial class SourceRequest<T> 
			{
		
		///<summary>The ID of the parent document</summary>
		public string Parent 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("parent"); } 
			set { this.Request.RequestParameters.AddQueryString("parent", value); }
		}
		
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("preference"); } 
			set { this.Request.RequestParameters.AddQueryString("preference", value); }
		}
		
		
		///<summary>Specify whether to perform the operation in realtime or search mode</summary>
		public bool Realtime 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("realtime"); } 
			set { this.Request.RequestParameters.AddQueryString("realtime", value); }
		}
		
		
		///<summary>Refresh the shard containing the document before performing the operation</summary>
		public bool Refresh 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("refresh"); } 
			set { this.Request.RequestParameters.AddQueryString("refresh", value); }
		}
		
		
		///<summary>Specific routing value</summary>
		public string Routing 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("routing"); } 
			set { this.Request.RequestParameters.AddQueryString("routing", value); }
		}
		
		
		///<summary>True or false to return the _source field or not, or a list of fields to return</summary>
		public  string[] _Source 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("_source"); } 
			set { this.Request.RequestParameters.AddQueryString("_source", value); }
		}
		
		
		///<summary>A list of fields to exclude from the returned _source field</summary>
		public IList<PropertyPathMarker> _SourceExclude 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<IList<PropertyPathMarker>>("_source_exclude"); } 
			set { this.Request.RequestParameters.AddQueryString("_source_exclude", value); }
		}
		
		
		///<summary>A list of fields to extract and return from the _source field</summary>
		public IList<PropertyPathMarker> _SourceInclude 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<IList<PropertyPathMarker>>("_source_include"); } 
			set { this.Request.RequestParameters.AddQueryString("_source_include", value); }
		}
		
		
		///<summary>Explicit version number for concurrency control</summary>
		public long Version 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<long>("version"); } 
			set { this.Request.RequestParameters.AddQueryString("version", value); }
		}
		
		
		///<summary>Specific version type</summary>
		public VersionType VersionType 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<VersionType>("version_type"); } 
			set { this.Request.RequestParameters.AddQueryString("version_type", value); }
		}
		
	}
	
		
	///<summary>Request parameters for Index
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html
	///</pre>
	///</summary>
	public partial class IndexRequest<TDocument> 
			{
		
		///<summary>Explicit write consistency setting for the operation</summary>
		public Consistency Consistency 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<Consistency>("consistency"); } 
			set { this.Request.RequestParameters.AddQueryString("consistency", value); }
		}
		
		
		///<summary>Explicit operation type</summary>
		public OpType OpType 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<OpType>("op_type"); } 
			set { this.Request.RequestParameters.AddQueryString("op_type", value); }
		}
		
		
		///<summary>ID of the parent document</summary>
		public string Parent 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("parent"); } 
			set { this.Request.RequestParameters.AddQueryString("parent", value); }
		}
		
		
		///<summary>Refresh the index after performing the operation</summary>
		public bool Refresh 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("refresh"); } 
			set { this.Request.RequestParameters.AddQueryString("refresh", value); }
		}
		
		
		///<summary>Specific replication type</summary>
		public Replication Replication 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<Replication>("replication"); } 
			set { this.Request.RequestParameters.AddQueryString("replication", value); }
		}
		
		
		///<summary>Specific routing value</summary>
		public string Routing 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("routing"); } 
			set { this.Request.RequestParameters.AddQueryString("routing", value); }
		}
		
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("timeout", value); }
		}
		
		
		///<summary>Explicit timestamp for the document</summary>
		public string Timestamp 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("timestamp"); } 
			set { this.Request.RequestParameters.AddQueryString("timestamp", value); }
		}
		
		
		///<summary>Expiration time for the document</summary>
		public string Ttl 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("ttl"); } 
			set { this.Request.RequestParameters.AddQueryString("ttl", value); }
		}
		
		
		///<summary>Explicit version number for concurrency control</summary>
		public long Version 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<long>("version"); } 
			set { this.Request.RequestParameters.AddQueryString("version", value); }
		}
		
		
		///<summary>Specific version type</summary>
		public VersionType VersionType 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<VersionType>("version_type"); } 
			set { this.Request.RequestParameters.AddQueryString("version_type", value); }
		}
		
	}
	
		
	///<summary>Request parameters for IndicesAnalyzeGetForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html
	///</pre>
	///</summary>
	public partial class AnalyzeRequest 
			{
		
		///<summary>The name of the analyzer to use</summary>
		public string Analyzer 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("analyzer"); } 
			set { this.Request.RequestParameters.AddQueryString("analyzer", value); }
		}
		
		
		///<summary>A comma-separated list of character filters to use for the analysis</summary>
		public  string[] CharFilters 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("char_filters"); } 
			set { this.Request.RequestParameters.AddQueryString("char_filters", value); }
		}
		
		
		///<summary>Use the analyzer configured for this field (instead of passing the analyzer name)</summary>
		public PropertyPathMarker Field 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<PropertyPathMarker>("field"); } 
			set { this.Request.RequestParameters.AddQueryString("field", value); }
		}
		
		
		///<summary>A comma-separated list of filters to use for the analysis</summary>
		public  string[] Filters 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("filters"); } 
			set { this.Request.RequestParameters.AddQueryString("filters", value); }
		}
		
		
		///<summary>The name of the index to scope the operation</summary>
		public string IndexQueryString 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("index"); } 
			set { this.Request.RequestParameters.AddQueryString("index", value); }
		}
		
		
		///<summary>With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)</summary>
		public bool PreferLocal 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("prefer_local"); } 
			set { this.Request.RequestParameters.AddQueryString("prefer_local", value); }
		}
		
		
		///<summary>The text on which the analysis should be performed (when request body is not used)</summary>
		public string Text 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("text"); } 
			set { this.Request.RequestParameters.AddQueryString("text", value); }
		}
		
		
		///<summary>The name of the tokenizer to use for the analysis</summary>
		public string Tokenizer 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("tokenizer"); } 
			set { this.Request.RequestParameters.AddQueryString("tokenizer", value); }
		}
		
		
		///<summary>Format of the output</summary>
		public Format Format 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<Format>("format"); } 
			set { this.Request.RequestParameters.AddQueryString("format", value); }
		}
		
	}
	
		
	///<summary>Request parameters for IndicesClearCacheForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html
	///</pre>
	///</summary>
	public partial class ClearCacheRequest 
			{
		
		///<summary>Clear field data</summary>
		public bool FieldData 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("field_data"); } 
			set { this.Request.RequestParameters.AddQueryString("field_data", value); }
		}
		
		
		///<summary>A comma-separated list of fields to clear when using the `field_data` parameter (default: all)</summary>
		public IList<PropertyPathMarker> Fields 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<IList<PropertyPathMarker>>("fields"); } 
			set { this.Request.RequestParameters.AddQueryString("fields", value); }
		}
		
		
		///<summary>Clear filter caches</summary>
		public bool Filter 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("filter"); } 
			set { this.Request.RequestParameters.AddQueryString("filter", value); }
		}
		
		
		///<summary>Clear filter caches</summary>
		public bool FilterCache 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("filter_cache"); } 
			set { this.Request.RequestParameters.AddQueryString("filter_cache", value); }
		}
		
		
		///<summary>A comma-separated list of keys to clear when using the `filter_cache` parameter (default: all)</summary>
		public bool FilterKeys 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("filter_keys"); } 
			set { this.Request.RequestParameters.AddQueryString("filter_keys", value); }
		}
		
		
		///<summary>Clear ID caches for parent/child</summary>
		public bool Id 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("id"); } 
			set { this.Request.RequestParameters.AddQueryString("id", value); }
		}
		
		
		///<summary>Clear ID caches for parent/child</summary>
		public bool IdCache 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("id_cache"); } 
			set { this.Request.RequestParameters.AddQueryString("id_cache", value); }
		}
		
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_unavailable"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_unavailable", value); }
		}
		
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("allow_no_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("allow_no_indices", value); }
		}
		
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ExpandWildcards>("expand_wildcards"); } 
			set { this.Request.RequestParameters.AddQueryString("expand_wildcards", value); }
		}
		
		
		///<summary>A comma-separated list of index name to limit the operation</summary>
		public  string[] IndexQueryString 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("index"); } 
			set { this.Request.RequestParameters.AddQueryString("index", value); }
		}
		
		
		///<summary>Clear the recycler cache</summary>
		public bool Recycler 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("recycler"); } 
			set { this.Request.RequestParameters.AddQueryString("recycler", value); }
		}
		
	}
	
		
	///<summary>Request parameters for IndicesClose
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-open-close.html
	///</pre>
	///</summary>
	public partial class CloseIndexRequest 
			{
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("timeout", value); }
		}
		
		
		///<summary>Specify timeout for connection to master</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_unavailable"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_unavailable", value); }
		}
		
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("allow_no_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("allow_no_indices", value); }
		}
		
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ExpandWildcards>("expand_wildcards"); } 
			set { this.Request.RequestParameters.AddQueryString("expand_wildcards", value); }
		}
		
	}
	
		
	///<summary>Request parameters for IndicesCreate
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-create-index.html
	///</pre>
	///</summary>
	public partial class CreateIndexRequest 
			{
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("timeout", value); }
		}
		
		
		///<summary>Specify timeout for connection to master</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
	}
	
		
	///<summary>Request parameters for IndicesDelete
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-delete-index.html
	///</pre>
	///</summary>
	public partial class DeleteIndexRequest 
			{
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("timeout", value); }
		}
		
		
		///<summary>Specify timeout for connection to master</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
	}
	
		
	///<summary>Request parameters for IndicesDeleteAlias
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html
	///</pre>
	///</summary>
	public partial class IndicesDeleteAliasRequest  : BasePathRequest<IndicesDeleteAliasRequestParameters>
			{
		
		///<summary>Explicit timestamp for the document</summary>
		public string Timeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("timeout", value); }
		}
		
		
		///<summary>Specify timeout for connection to master</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<IndicesDeleteAliasRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}

	}
	
		
	///<summary>Request parameters for IndicesDeleteMapping
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-delete-mapping.html
	///</pre>
	///</summary>
	public partial class DeleteMappingRequest<T> 
			{
		
		///<summary>Specify timeout for connection to master</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
	}
	
		
	///<summary>Request parameters for IndicesDeleteTemplateForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html
	///</pre>
	///</summary>
	public partial class DeleteTemplateRequest 
			{
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("timeout", value); }
		}
		
		
		///<summary>Specify timeout for connection to master</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
	}
	
		
	///<summary>Request parameters for IndicesDeleteWarmer
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html
	///</pre>
	///</summary>
	public partial class DeleteWarmerRequest 
			{
		
		///<summary>Specify timeout for connection to master</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
	}
	
		
	///<summary>Request parameters for IndicesExists
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-settings.html
	///</pre>
	///</summary>
	public partial class IndexExistsRequest 
			{
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_unavailable"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_unavailable", value); }
		}
		
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("allow_no_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("allow_no_indices", value); }
		}
		
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ExpandWildcards>("expand_wildcards"); } 
			set { this.Request.RequestParameters.AddQueryString("expand_wildcards", value); }
		}
		
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("local"); } 
			set { this.Request.RequestParameters.AddQueryString("local", value); }
		}
		
	}
	
		
	///<summary>Request parameters for IndicesExistsAliasForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html
	///</pre>
	///</summary>
	public partial class IndicesExistsAliasRequest  : BasePathRequest<IndicesExistsAliasRequestParameters>
			{
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_unavailable"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_unavailable", value); }
		}
		
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("allow_no_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("allow_no_indices", value); }
		}
		
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ExpandWildcards>("expand_wildcards"); } 
			set { this.Request.RequestParameters.AddQueryString("expand_wildcards", value); }
		}
		
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("local"); } 
			set { this.Request.RequestParameters.AddQueryString("local", value); }
		}
		

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<IndicesExistsAliasRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}

	}
	
		
	///<summary>Request parameters for IndicesExistsTemplateForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html
	///</pre>
	///</summary>
	public partial class IndicesExistsTemplateRequest  : BasePathRequest<IndicesExistsTemplateRequestParameters>
			{
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("local"); } 
			set { this.Request.RequestParameters.AddQueryString("local", value); }
		}
		

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<IndicesExistsTemplateRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}

	}
	
		
	///<summary>Request parameters for IndicesExistsType
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-types-exists.html
	///</pre>
	///</summary>
	public partial class IndicesExistsTypeRequest  : BasePathRequest<IndicesExistsTypeRequestParameters>
			{
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_unavailable"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_unavailable", value); }
		}
		
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("allow_no_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("allow_no_indices", value); }
		}
		
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ExpandWildcards>("expand_wildcards"); } 
			set { this.Request.RequestParameters.AddQueryString("expand_wildcards", value); }
		}
		
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("local"); } 
			set { this.Request.RequestParameters.AddQueryString("local", value); }
		}
		

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<IndicesExistsTypeRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}

	}
	
		
	///<summary>Request parameters for IndicesFlushForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html
	///</pre>
	///</summary>
	public partial class FlushRequest 
			{
		
		///<summary>Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)</summary>
		public bool Force 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("force"); } 
			set { this.Request.RequestParameters.AddQueryString("force", value); }
		}
		
		
		///<summary>If set to true a new index writer is created and settings that have been changed related to the index writer will be refreshed. Note: if a full flush is required for a setting to take effect this will be part of the settings update process and it not required to be executed by the user. (This setting can be considered as internal)</summary>
		public bool Full 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("full"); } 
			set { this.Request.RequestParameters.AddQueryString("full", value); }
		}
		
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_unavailable"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_unavailable", value); }
		}
		
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("allow_no_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("allow_no_indices", value); }
		}
		
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ExpandWildcards>("expand_wildcards"); } 
			set { this.Request.RequestParameters.AddQueryString("expand_wildcards", value); }
		}
		
	}
	
		
	///<summary>Request parameters for IndicesGetAliasForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html
	///</pre>
	///</summary>
	public partial class GetAliasRequest 
			{
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_unavailable"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_unavailable", value); }
		}
		
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("allow_no_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("allow_no_indices", value); }
		}
		
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ExpandWildcards>("expand_wildcards"); } 
			set { this.Request.RequestParameters.AddQueryString("expand_wildcards", value); }
		}
		
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("local"); } 
			set { this.Request.RequestParameters.AddQueryString("local", value); }
		}
		
	}
	
		
	///<summary>Request parameters for IndicesGetAliasesForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html
	///</pre>
	///</summary>
	public partial class GetAliasesRequest 
			{
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("timeout", value); }
		}
		
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("local"); } 
			set { this.Request.RequestParameters.AddQueryString("local", value); }
		}
		
	}
	
		
	///<summary>Request parameters for IndicesGetFieldMappingForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html
	///</pre>
	///</summary>
	public partial class IndicesGetFieldMappingRequest  : BasePathRequest<IndicesGetFieldMappingRequestParameters>
			{
		
		///<summary>Whether the default mapping values should be returned as well</summary>
		public bool IncludeDefaults 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("include_defaults"); } 
			set { this.Request.RequestParameters.AddQueryString("include_defaults", value); }
		}
		
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_unavailable"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_unavailable", value); }
		}
		
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("allow_no_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("allow_no_indices", value); }
		}
		
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ExpandWildcards>("expand_wildcards"); } 
			set { this.Request.RequestParameters.AddQueryString("expand_wildcards", value); }
		}
		
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("local"); } 
			set { this.Request.RequestParameters.AddQueryString("local", value); }
		}
		

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<IndicesGetFieldMappingRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}

	}
	
		
	///<summary>Request parameters for IndicesGetMappingForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html
	///</pre>
	///</summary>
	public partial class GetMappingRequest<T> 
			{
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_unavailable"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_unavailable", value); }
		}
		
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("allow_no_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("allow_no_indices", value); }
		}
		
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ExpandWildcards>("expand_wildcards"); } 
			set { this.Request.RequestParameters.AddQueryString("expand_wildcards", value); }
		}
		
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("local"); } 
			set { this.Request.RequestParameters.AddQueryString("local", value); }
		}
		
	}
	
		
	///<summary>Request parameters for IndicesGetSettingsForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html
	///</pre>
	///</summary>
	public partial class GetIndexSettingsRequest 
			{
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_unavailable"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_unavailable", value); }
		}
		
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("allow_no_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("allow_no_indices", value); }
		}
		
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ExpandWildcards>("expand_wildcards"); } 
			set { this.Request.RequestParameters.AddQueryString("expand_wildcards", value); }
		}
		
		
		///<summary>Return settings in flat format (default: false)</summary>
		public bool FlatSettings 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("flat_settings"); } 
			set { this.Request.RequestParameters.AddQueryString("flat_settings", value); }
		}
		
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("local"); } 
			set { this.Request.RequestParameters.AddQueryString("local", value); }
		}
		
	}
	
		
	///<summary>Request parameters for IndicesGetTemplateForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html
	///</pre>
	///</summary>
	public partial class GetTemplateRequest 
			{
		
		///<summary>Return settings in flat format (default: false)</summary>
		public bool FlatSettings 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("flat_settings"); } 
			set { this.Request.RequestParameters.AddQueryString("flat_settings", value); }
		}
		
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("local"); } 
			set { this.Request.RequestParameters.AddQueryString("local", value); }
		}
		
	}
	
		
	///<summary>Request parameters for IndicesGetWarmerForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html
	///</pre>
	///</summary>
	public partial class GetWarmerRequest 
			{
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_unavailable"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_unavailable", value); }
		}
		
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("allow_no_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("allow_no_indices", value); }
		}
		
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ExpandWildcards>("expand_wildcards"); } 
			set { this.Request.RequestParameters.AddQueryString("expand_wildcards", value); }
		}
		
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("local"); } 
			set { this.Request.RequestParameters.AddQueryString("local", value); }
		}
		
	}
	
		
	///<summary>Request parameters for IndicesOpen
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-open-close.html
	///</pre>
	///</summary>
	public partial class OpenIndexRequest 
			{
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("timeout", value); }
		}
		
		
		///<summary>Specify timeout for connection to master</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_unavailable"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_unavailable", value); }
		}
		
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("allow_no_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("allow_no_indices", value); }
		}
		
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ExpandWildcards>("expand_wildcards"); } 
			set { this.Request.RequestParameters.AddQueryString("expand_wildcards", value); }
		}
		
	}
	
		
	///<summary>Request parameters for IndicesOptimizeForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html
	///</pre>
	///</summary>
	public partial class OptimizeRequest 
			{
		
		///<summary>Specify whether the index should be flushed after performing the operation (default: true)</summary>
		public bool Flush 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("flush"); } 
			set { this.Request.RequestParameters.AddQueryString("flush", value); }
		}
		
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_unavailable"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_unavailable", value); }
		}
		
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("allow_no_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("allow_no_indices", value); }
		}
		
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ExpandWildcards>("expand_wildcards"); } 
			set { this.Request.RequestParameters.AddQueryString("expand_wildcards", value); }
		}
		
		
		///<summary>The number of segments the index should be merged into (default: dynamic)</summary>
		public long MaxNumSegments 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<long>("max_num_segments"); } 
			set { this.Request.RequestParameters.AddQueryString("max_num_segments", value); }
		}
		
		
		///<summary>Specify whether the operation should only expunge deleted documents</summary>
		public bool OnlyExpungeDeletes 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("only_expunge_deletes"); } 
			set { this.Request.RequestParameters.AddQueryString("only_expunge_deletes", value); }
		}
		
		
		///<summary>TODO: ?</summary>
		public string OperationThreading 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("operation_threading"); } 
			set { this.Request.RequestParameters.AddQueryString("operation_threading", value); }
		}
		
		
		///<summary>Specify whether the request should block until the merge process is finished (default: true)</summary>
		public bool WaitForMerge 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("wait_for_merge"); } 
			set { this.Request.RequestParameters.AddQueryString("wait_for_merge", value); }
		}
		
		
		///<summary>Force a merge operation to run, even if there is a single segment in the index (default: false)</summary>
		public bool Force 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("force"); } 
			set { this.Request.RequestParameters.AddQueryString("force", value); }
		}
		
	}
	
		
	///<summary>Request parameters for IndicesPutAlias
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html
	///</pre>
	///</summary>
	public partial class IndicesPutAliasRequest  : BasePathRequest<IndicesPutAliasRequestParameters>
			{
		
		///<summary>Explicit timestamp for the document</summary>
		public string Timeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("timeout", value); }
		}
		
		
		///<summary>Specify timeout for connection to master</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<IndicesPutAliasRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}

	}
	
		
	///<summary>Request parameters for IndicesPutMapping
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html
	///</pre>
	///</summary>
	public partial class PutMappingRequest<T> 
			{
		
		///<summary>Specify whether to ignore conflicts while updating the mapping (default: false)</summary>
		public bool IgnoreConflicts 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_conflicts"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_conflicts", value); }
		}
		
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("timeout", value); }
		}
		
		
		///<summary>Specify timeout for connection to master</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_unavailable"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_unavailable", value); }
		}
		
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("allow_no_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("allow_no_indices", value); }
		}
		
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ExpandWildcards>("expand_wildcards"); } 
			set { this.Request.RequestParameters.AddQueryString("expand_wildcards", value); }
		}
		
	}
	
		
	///<summary>Request parameters for IndicesPutSettingsForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-update-settings.html
	///</pre>
	///</summary>
	public partial class UpdateSettingsRequest 
			{
		
		///<summary>Specify timeout for connection to master</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_unavailable"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_unavailable", value); }
		}
		
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("allow_no_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("allow_no_indices", value); }
		}
		
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ExpandWildcards>("expand_wildcards"); } 
			set { this.Request.RequestParameters.AddQueryString("expand_wildcards", value); }
		}
		
		
		///<summary>Return settings in flat format (default: false)</summary>
		public bool FlatSettings 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("flat_settings"); } 
			set { this.Request.RequestParameters.AddQueryString("flat_settings", value); }
		}
		
	}
	
		
	///<summary>Request parameters for IndicesPutTemplateForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html
	///</pre>
	///</summary>
	public partial class PutTemplateRequest 
			{
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("timeout", value); }
		}
		
		
		///<summary>Specify timeout for connection to master</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
		
		///<summary>Return settings in flat format (default: false)</summary>
		public bool FlatSettings 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("flat_settings"); } 
			set { this.Request.RequestParameters.AddQueryString("flat_settings", value); }
		}
		
	}
	
		
	///<summary>Request parameters for IndicesPutWarmerForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html
	///</pre>
	///</summary>
	public partial class PutWarmerRequest 
			{
		
		///<summary>Specify timeout for connection to master</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed) in the search request to warm</summary>
		public bool IgnoreUnavailable 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_unavailable"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_unavailable", value); }
		}
		
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices in the search request to warm. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("allow_no_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("allow_no_indices", value); }
		}
		
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both, in the search request to warm.</summary>
		public ExpandWildcards ExpandWildcards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ExpandWildcards>("expand_wildcards"); } 
			set { this.Request.RequestParameters.AddQueryString("expand_wildcards", value); }
		}
		
	}
	
		
	///<summary>Request parameters for IndicesRecoveryForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/indices-recovery.html
	///</pre>
	///</summary>
	public partial class IndicesRecoveryRequest  : BasePathRequest<IndicesRecoveryRequestParameters>
			{
		
		///<summary>Whether to display detailed information about shard recovery</summary>
		public bool Detailed 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("detailed"); } 
			set { this.Request.RequestParameters.AddQueryString("detailed", value); }
		}
		
		
		///<summary>Display only those recoveries that are currently on-going</summary>
		public bool ActiveOnly 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("active_only"); } 
			set { this.Request.RequestParameters.AddQueryString("active_only", value); }
		}
		
		
		///<summary>Whether to return time and byte values in human-readable format.</summary>
		public bool Human 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("human"); } 
			set { this.Request.RequestParameters.AddQueryString("human", value); }
		}
		

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<IndicesRecoveryRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}

	}
	
		
	///<summary>Request parameters for IndicesRefreshForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html
	///</pre>
	///</summary>
	public partial class RefreshRequest 
			{
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_unavailable"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_unavailable", value); }
		}
		
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("allow_no_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("allow_no_indices", value); }
		}
		
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ExpandWildcards>("expand_wildcards"); } 
			set { this.Request.RequestParameters.AddQueryString("expand_wildcards", value); }
		}
		
		
		///<summary>Force a refresh even if not required</summary>
		public bool Force 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("force"); } 
			set { this.Request.RequestParameters.AddQueryString("force", value); }
		}
		
		
		///<summary>TODO: ?</summary>
		public string OperationThreading 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("operation_threading"); } 
			set { this.Request.RequestParameters.AddQueryString("operation_threading", value); }
		}
		
	}
	
		
	///<summary>Request parameters for IndicesSegmentsForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-segments.html
	///</pre>
	///</summary>
	public partial class SegmentsRequest 
			{
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_unavailable"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_unavailable", value); }
		}
		
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("allow_no_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("allow_no_indices", value); }
		}
		
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ExpandWildcards>("expand_wildcards"); } 
			set { this.Request.RequestParameters.AddQueryString("expand_wildcards", value); }
		}
		
		
		///<summary>Whether to return time and byte values in human-readable format.</summary>
		public bool Human 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("human"); } 
			set { this.Request.RequestParameters.AddQueryString("human", value); }
		}
		
		
		///<summary>TODO: ?</summary>
		public string OperationThreading 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("operation_threading"); } 
			set { this.Request.RequestParameters.AddQueryString("operation_threading", value); }
		}
		
	}
	
		
	///<summary>Request parameters for IndicesStatsForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html
	///</pre>
	///</summary>
	public partial class IndicesStatsRequest 
			{
		
		///<summary>A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)</summary>
		public IList<PropertyPathMarker> CompletionFields 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<IList<PropertyPathMarker>>("completion_fields"); } 
			set { this.Request.RequestParameters.AddQueryString("completion_fields", value); }
		}
		
		
		///<summary>A comma-separated list of fields for `fielddata` index metric (supports wildcards)</summary>
		public IList<PropertyPathMarker> FielddataFields 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<IList<PropertyPathMarker>>("fielddata_fields"); } 
			set { this.Request.RequestParameters.AddQueryString("fielddata_fields", value); }
		}
		
		
		///<summary>A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)</summary>
		public IList<PropertyPathMarker> Fields 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<IList<PropertyPathMarker>>("fields"); } 
			set { this.Request.RequestParameters.AddQueryString("fields", value); }
		}
		
		
		///<summary>A comma-separated list of search groups for `search` index metric</summary>
		public bool Groups 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("groups"); } 
			set { this.Request.RequestParameters.AddQueryString("groups", value); }
		}
		
		
		///<summary>Whether to return time and byte values in human-readable format.</summary>
		public bool Human 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("human"); } 
			set { this.Request.RequestParameters.AddQueryString("human", value); }
		}
		
		
		///<summary>Return stats aggregated at cluster, index or shard level</summary>
		public Level Level 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<Level>("level"); } 
			set { this.Request.RequestParameters.AddQueryString("level", value); }
		}
		
	}
	
		
	///<summary>Request parameters for IndicesStatusForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-status.html
	///</pre>
	///</summary>
	public partial class IndicesStatusRequest 
			{
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_unavailable"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_unavailable", value); }
		}
		
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("allow_no_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("allow_no_indices", value); }
		}
		
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ExpandWildcards>("expand_wildcards"); } 
			set { this.Request.RequestParameters.AddQueryString("expand_wildcards", value); }
		}
		
		
		///<summary>Whether to return time and byte values in human-readable format.</summary>
		public bool Human 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("human"); } 
			set { this.Request.RequestParameters.AddQueryString("human", value); }
		}
		
		
		///<summary>TODO: ?</summary>
		public string OperationThreading 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("operation_threading"); } 
			set { this.Request.RequestParameters.AddQueryString("operation_threading", value); }
		}
		
		
		///<summary>Return information about shard recovery</summary>
		public bool Recovery 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("recovery"); } 
			set { this.Request.RequestParameters.AddQueryString("recovery", value); }
		}
		
		
		///<summary>TODO: ?</summary>
		public bool Snapshot 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("snapshot"); } 
			set { this.Request.RequestParameters.AddQueryString("snapshot", value); }
		}
		
	}
	
		
	///<summary>Request parameters for IndicesUpdateAliasesForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html
	///</pre>
	///</summary>
	public partial class AliasRequest 
			{
		
		///<summary>Request timeout</summary>
		public string Timeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("timeout", value); }
		}
		
		
		///<summary>Specify timeout for connection to master</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
	}
	
		
	///<summary>Request parameters for IndicesValidateQueryGetForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html
	///</pre>
	///</summary>
	public partial class ValidateQueryRequest<T> 
			{
		
		///<summary>Return detailed information about the error</summary>
		public bool Explain 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("explain"); } 
			set { this.Request.RequestParameters.AddQueryString("explain", value); }
		}
		
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_unavailable"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_unavailable", value); }
		}
		
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("allow_no_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("allow_no_indices", value); }
		}
		
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ExpandWildcards>("expand_wildcards"); } 
			set { this.Request.RequestParameters.AddQueryString("expand_wildcards", value); }
		}
		
		
		///<summary>TODO: ?</summary>
		public string OperationThreading 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("operation_threading"); } 
			set { this.Request.RequestParameters.AddQueryString("operation_threading", value); }
		}
		
		
		///<summary>The URL-encoded query definition (instead of using the request body)</summary>
		public string Source 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("source"); } 
			set { this.Request.RequestParameters.AddQueryString("source", value); }
		}
		
		
		///<summary>Query in the Lucene query string syntax</summary>
		public string Q 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("q"); } 
			set { this.Request.RequestParameters.AddQueryString("q", value); }
		}
		
	}
	
		
	///<summary>Request parameters for Info
	///<pre>
	///http://www.elasticsearch.org/guide/
	///</pre>
	///</summary>
	public partial class InfoRequest 
			{
	}
	
		
	///<summary>Request parameters for ListBenchmarks
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html
	///</pre>
	///</summary>
	public partial class ListBenchmarksRequest  : BasePathRequest<ListBenchmarksRequestParameters>
			{

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<ListBenchmarksRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}

	}
	
		
	///<summary>Request parameters for MgetGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html
	///</pre>
	///</summary>
	public partial class MultiGetRequest 
			{
		
		///<summary>A comma-separated list of fields to return in the response</summary>
		public IList<PropertyPathMarker> Fields 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<IList<PropertyPathMarker>>("fields"); } 
			set { this.Request.RequestParameters.AddQueryString("fields", value); }
		}
		
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("preference"); } 
			set { this.Request.RequestParameters.AddQueryString("preference", value); }
		}
		
		
		///<summary>Specify whether to perform the operation in realtime or search mode</summary>
		public bool Realtime 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("realtime"); } 
			set { this.Request.RequestParameters.AddQueryString("realtime", value); }
		}
		
		
		///<summary>Refresh the shard containing the document before performing the operation</summary>
		public bool Refresh 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("refresh"); } 
			set { this.Request.RequestParameters.AddQueryString("refresh", value); }
		}
		
		
		///<summary>True or false to return the _source field or not, or a list of fields to return</summary>
		public  string[] _Source 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("_source"); } 
			set { this.Request.RequestParameters.AddQueryString("_source", value); }
		}
		
		
		///<summary>A list of fields to exclude from the returned _source field</summary>
		public IList<PropertyPathMarker> _SourceExclude 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<IList<PropertyPathMarker>>("_source_exclude"); } 
			set { this.Request.RequestParameters.AddQueryString("_source_exclude", value); }
		}
		
		
		///<summary>A list of fields to extract and return from the _source field</summary>
		public IList<PropertyPathMarker> _SourceInclude 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<IList<PropertyPathMarker>>("_source_include"); } 
			set { this.Request.RequestParameters.AddQueryString("_source_include", value); }
		}
		
	}
	
		
	///<summary>Request parameters for MltGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-more-like-this.html
	///</pre>
	///</summary>
	public partial class MoreLikeThisRequest<T> 
			{
		
		///<summary>The boost factor</summary>
		public double BoostTerms 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<double>("boost_terms"); } 
			set { this.Request.RequestParameters.AddQueryString("boost_terms", value); }
		}
		
		
		///<summary>The word occurrence frequency as count: words with higher occurrence in the corpus will be ignored</summary>
		public long MaxDocFreq 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<long>("max_doc_freq"); } 
			set { this.Request.RequestParameters.AddQueryString("max_doc_freq", value); }
		}
		
		
		///<summary>The maximum query terms to be included in the generated query</summary>
		public long MaxQueryTerms 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<long>("max_query_terms"); } 
			set { this.Request.RequestParameters.AddQueryString("max_query_terms", value); }
		}
		
		
		///<summary>The minimum length of the word: longer words will be ignored</summary>
		public long MaxWordLength 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<long>("max_word_length"); } 
			set { this.Request.RequestParameters.AddQueryString("max_word_length", value); }
		}
		
		
		///<summary>The word occurrence frequency as count: words with lower occurrence in the corpus will be ignored</summary>
		public long MinDocFreq 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<long>("min_doc_freq"); } 
			set { this.Request.RequestParameters.AddQueryString("min_doc_freq", value); }
		}
		
		
		///<summary>The term frequency as percent: terms with lower occurence in the source document will be ignored</summary>
		public long MinTermFreq 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<long>("min_term_freq"); } 
			set { this.Request.RequestParameters.AddQueryString("min_term_freq", value); }
		}
		
		
		///<summary>The minimum length of the word: shorter words will be ignored</summary>
		public long MinWordLength 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<long>("min_word_length"); } 
			set { this.Request.RequestParameters.AddQueryString("min_word_length", value); }
		}
		
		
		///<summary>Specific fields to perform the query against</summary>
		public IList<PropertyPathMarker> MltFields 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<IList<PropertyPathMarker>>("mlt_fields"); } 
			set { this.Request.RequestParameters.AddQueryString("mlt_fields", value); }
		}
		
		
		///<summary>How many terms have to match in order to consider the document a match (default: 0.3)</summary>
		public double PercentTermsToMatch 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<double>("percent_terms_to_match"); } 
			set { this.Request.RequestParameters.AddQueryString("percent_terms_to_match", value); }
		}
		
		
		///<summary>Specific routing value</summary>
		public string Routing 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("routing"); } 
			set { this.Request.RequestParameters.AddQueryString("routing", value); }
		}
		
		
		///<summary>The offset from which to return results</summary>
		public long SearchFrom 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<long>("search_from"); } 
			set { this.Request.RequestParameters.AddQueryString("search_from", value); }
		}
		
		
		///<summary>A comma-separated list of indices to perform the query against (default: the index containing the document)</summary>
		public  string[] SearchIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("search_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("search_indices", value); }
		}
		
		
		///<summary>The search query hint</summary>
		public string SearchQueryHint 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("search_query_hint"); } 
			set { this.Request.RequestParameters.AddQueryString("search_query_hint", value); }
		}
		
		
		///<summary>A scroll search request definition</summary>
		public string SearchScroll 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("search_scroll"); } 
			set { this.Request.RequestParameters.AddQueryString("search_scroll", value); }
		}
		
		
		///<summary>The number of documents to return (default: 10)</summary>
		public long SearchSize 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<long>("search_size"); } 
			set { this.Request.RequestParameters.AddQueryString("search_size", value); }
		}
		
		
		///<summary>A specific search request definition (instead of using the request body)</summary>
		public string SearchSource 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("search_source"); } 
			set { this.Request.RequestParameters.AddQueryString("search_source", value); }
		}
		
		
		///<summary>Specific search type (eg. `dfs_then_fetch`, `count`, etc)</summary>
		public string SearchType 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("search_type"); } 
			set { this.Request.RequestParameters.AddQueryString("search_type", value); }
		}
		
		
		///<summary>A comma-separated list of types to perform the query against (default: the same type as the document)</summary>
		public  string[] SearchTypes 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("search_types"); } 
			set { this.Request.RequestParameters.AddQueryString("search_types", value); }
		}
		
		
		///<summary>A list of stop words to be ignored</summary>
		public  string[] StopWords 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("stop_words"); } 
			set { this.Request.RequestParameters.AddQueryString("stop_words", value); }
		}
		
	}
	
		
	///<summary>Request parameters for MpercolateGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html
	///</pre>
	///</summary>
	public partial class MpercolateRequest  : BasePathRequest<MpercolateRequestParameters>
			{
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_unavailable"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_unavailable", value); }
		}
		
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("allow_no_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("allow_no_indices", value); }
		}
		
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ExpandWildcards>("expand_wildcards"); } 
			set { this.Request.RequestParameters.AddQueryString("expand_wildcards", value); }
		}
		

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<MpercolateRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}

	}
	
		
	///<summary>Request parameters for MsearchGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html
	///</pre>
	///</summary>
	public partial class MultiSearchRequest 
			{
		
		///<summary>Search operation type</summary>
		public SearchType SearchType 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<SearchType>("search_type"); } 
			set { this.Request.RequestParameters.AddQueryString("search_type", value); }
		}
		
	}
	
		
	///<summary>Request parameters for MtermvectorsGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html
	///</pre>
	///</summary>
	public partial class MultiTermVectorsRequest 
			{
		
		///<summary>Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public bool TermStatistics 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("term_statistics"); } 
			set { this.Request.RequestParameters.AddQueryString("term_statistics", value); }
		}
		
		
		///<summary>Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public bool FieldStatistics 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("field_statistics"); } 
			set { this.Request.RequestParameters.AddQueryString("field_statistics", value); }
		}
		
		
		///<summary>A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public IList<PropertyPathMarker> Fields 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<IList<PropertyPathMarker>>("fields"); } 
			set { this.Request.RequestParameters.AddQueryString("fields", value); }
		}
		
		
		///<summary>Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public bool Offsets 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("offsets"); } 
			set { this.Request.RequestParameters.AddQueryString("offsets", value); }
		}
		
		
		///<summary>Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public bool Positions 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("positions"); } 
			set { this.Request.RequestParameters.AddQueryString("positions", value); }
		}
		
		
		///<summary>Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public bool Payloads 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("payloads"); } 
			set { this.Request.RequestParameters.AddQueryString("payloads", value); }
		}
		
		
		///<summary>Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public string Preference 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("preference"); } 
			set { this.Request.RequestParameters.AddQueryString("preference", value); }
		}
		
		
		///<summary>Specific routing value. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public string Routing 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("routing"); } 
			set { this.Request.RequestParameters.AddQueryString("routing", value); }
		}
		
		
		///<summary>Parent id of documents. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public string Parent 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("parent"); } 
			set { this.Request.RequestParameters.AddQueryString("parent", value); }
		}
		
	}
	
		
	///<summary>Request parameters for NodesHotThreadsForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-hot-threads.html
	///</pre>
	///</summary>
	public partial class NodesHotThreadsRequest  : BasePathRequest<NodesHotThreadsRequestParameters>
			{
		
		///<summary>The interval for the second sampling of threads</summary>
		public string Interval 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("interval"); } 
			set { this.Request.RequestParameters.AddQueryString("interval", value); }
		}
		
		
		///<summary>Number of samples of thread stacktrace (default: 10)</summary>
		public long Snapshots 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<long>("snapshots"); } 
			set { this.Request.RequestParameters.AddQueryString("snapshots", value); }
		}
		
		
		///<summary>Specify the number of threads to provide information for (default: 3)</summary>
		public long Threads 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<long>("threads"); } 
			set { this.Request.RequestParameters.AddQueryString("threads", value); }
		}
		
		
		///<summary>The type to sample (default: cpu)</summary>
		public ThreadType ThreadType 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ThreadType>("thread_type"); } 
			set { this.Request.RequestParameters.AddQueryString("thread_type", value); }
		}
		

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<NodesHotThreadsRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}

	}
	
		
	///<summary>Request parameters for NodesInfoForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html
	///</pre>
	///</summary>
	public partial class NodesInfoRequest 
			{
		
		///<summary>Return settings in flat format (default: false)</summary>
		public bool FlatSettings 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("flat_settings"); } 
			set { this.Request.RequestParameters.AddQueryString("flat_settings", value); }
		}
		
		
		///<summary>Whether to return time and byte values in human-readable format.</summary>
		public bool Human 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("human"); } 
			set { this.Request.RequestParameters.AddQueryString("human", value); }
		}
		
	}
	
		
	///<summary>Request parameters for NodesShutdownForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-shutdown.html
	///</pre>
	///</summary>
	public partial class NodesShutdownRequest  : BasePathRequest<NodesShutdownRequestParameters>
			{
		
		///<summary>Set the delay for the operation (default: 1s)</summary>
		public string Delay 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("delay"); } 
			set { this.Request.RequestParameters.AddQueryString("delay", value); }
		}
		
		
		///<summary>Exit the JVM as well (default: true)</summary>
		public bool Exit 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("exit"); } 
			set { this.Request.RequestParameters.AddQueryString("exit", value); }
		}
		

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<NodesShutdownRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}

	}
	
		
	///<summary>Request parameters for NodesStatsForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html
	///</pre>
	///</summary>
	public partial class NodesStatsRequest 
			{
		
		///<summary>A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)</summary>
		public IList<PropertyPathMarker> CompletionFields 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<IList<PropertyPathMarker>>("completion_fields"); } 
			set { this.Request.RequestParameters.AddQueryString("completion_fields", value); }
		}
		
		
		///<summary>A comma-separated list of fields for `fielddata` index metric (supports wildcards)</summary>
		public IList<PropertyPathMarker> FielddataFields 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<IList<PropertyPathMarker>>("fielddata_fields"); } 
			set { this.Request.RequestParameters.AddQueryString("fielddata_fields", value); }
		}
		
		
		///<summary>A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)</summary>
		public IList<PropertyPathMarker> Fields 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<IList<PropertyPathMarker>>("fields"); } 
			set { this.Request.RequestParameters.AddQueryString("fields", value); }
		}
		
		
		///<summary>A comma-separated list of search groups for `search` index metric</summary>
		public bool Groups 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("groups"); } 
			set { this.Request.RequestParameters.AddQueryString("groups", value); }
		}
		
		
		///<summary>Whether to return time and byte values in human-readable format.</summary>
		public bool Human 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("human"); } 
			set { this.Request.RequestParameters.AddQueryString("human", value); }
		}
		
		
		///<summary>Return indices stats aggregated at node, index or shard level</summary>
		public Level Level 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<Level>("level"); } 
			set { this.Request.RequestParameters.AddQueryString("level", value); }
		}
		
		
		///<summary>A comma-separated list of document types for the `indexing` index metric</summary>
		public  string[] Types 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("types"); } 
			set { this.Request.RequestParameters.AddQueryString("types", value); }
		}
		
	}
	
		
	///<summary>Request parameters for PercolateGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html
	///</pre>
	///</summary>
	public partial class PercolateRequest<TDocument> 
			{
		
		///<summary>A comma-separated list of specific routing values</summary>
		public  string[] Routing 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("routing"); } 
			set { this.Request.RequestParameters.AddQueryString("routing", value); }
		}
		
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("preference"); } 
			set { this.Request.RequestParameters.AddQueryString("preference", value); }
		}
		
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_unavailable"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_unavailable", value); }
		}
		
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("allow_no_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("allow_no_indices", value); }
		}
		
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ExpandWildcards>("expand_wildcards"); } 
			set { this.Request.RequestParameters.AddQueryString("expand_wildcards", value); }
		}
		
		
		///<summary>The index to percolate the document into. Defaults to index.</summary>
		public string PercolateIndex 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("percolate_index"); } 
			set { this.Request.RequestParameters.AddQueryString("percolate_index", value); }
		}
		
		
		///<summary>The type to percolate document into. Defaults to type.</summary>
		public string PercolateType 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("percolate_type"); } 
			set { this.Request.RequestParameters.AddQueryString("percolate_type", value); }
		}
		
		
		///<summary>Explicit version number for concurrency control</summary>
		public long Version 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<long>("version"); } 
			set { this.Request.RequestParameters.AddQueryString("version", value); }
		}
		
		
		///<summary>Specific version type</summary>
		public VersionType VersionType 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<VersionType>("version_type"); } 
			set { this.Request.RequestParameters.AddQueryString("version_type", value); }
		}
		
	}
	
		
	///<summary>Request parameters for Ping
	///<pre>
	///http://www.elasticsearch.org/guide/
	///</pre>
	///</summary>
	public partial class PingRequest  : BasePathRequest<PingRequestParameters>
			{

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<PingRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}

	}
	
		
	///<summary>Request parameters for ScrollGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html
	///</pre>
	///</summary>
	public partial class ScrollRequest 
			{
	}
	
		
	///<summary>Request parameters for SearchGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html
	///</pre>
	///</summary>
	public partial class SearchRequest<T> 
			{
		
		///<summary>The analyzer to use for the query string</summary>
		public string Analyzer 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("analyzer"); } 
			set { this.Request.RequestParameters.AddQueryString("analyzer", value); }
		}
		
		
		///<summary>Specify whether wildcard and prefix queries should be analyzed (default: false)</summary>
		public bool AnalyzeWildcard 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("analyze_wildcard"); } 
			set { this.Request.RequestParameters.AddQueryString("analyze_wildcard", value); }
		}
		
		
		///<summary>The default operator for query string query (AND or OR)</summary>
		public DefaultOperator DefaultOperator 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<DefaultOperator>("default_operator"); } 
			set { this.Request.RequestParameters.AddQueryString("default_operator", value); }
		}
		
		
		///<summary>The field to use as default where no field prefix is given in the query string</summary>
		public string Df 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("df"); } 
			set { this.Request.RequestParameters.AddQueryString("df", value); }
		}
		
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_unavailable"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_unavailable", value); }
		}
		
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("allow_no_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("allow_no_indices", value); }
		}
		
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ExpandWildcards>("expand_wildcards"); } 
			set { this.Request.RequestParameters.AddQueryString("expand_wildcards", value); }
		}
		
		
		///<summary>Specify whether format-based query failures (such as providing text to a numeric field) should be ignored</summary>
		public bool Lenient 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("lenient"); } 
			set { this.Request.RequestParameters.AddQueryString("lenient", value); }
		}
		
		
		///<summary>Specify whether query terms should be lowercased</summary>
		public bool LowercaseExpandedTerms 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("lowercase_expanded_terms"); } 
			set { this.Request.RequestParameters.AddQueryString("lowercase_expanded_terms", value); }
		}
		
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("preference"); } 
			set { this.Request.RequestParameters.AddQueryString("preference", value); }
		}
		
		
		///<summary>A comma-separated list of specific routing values</summary>
		public  string[] Routing 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("routing"); } 
			set { this.Request.RequestParameters.AddQueryString("routing", value); }
		}
		
		
		///<summary>Specify how long a consistent view of the index should be maintained for scrolled search</summary>
		public string Scroll 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("scroll"); } 
			set { this.Request.RequestParameters.AddQueryString("scroll", value); }
		}
		
		
		///<summary>Search operation type</summary>
		public SearchType SearchType 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<SearchType>("search_type"); } 
			set { this.Request.RequestParameters.AddQueryString("search_type", value); }
		}
		
		
		///<summary>Specific &#39;tag&#39; of the request for logging and statistical purposes</summary>
		public  string[] Stats 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("stats"); } 
			set { this.Request.RequestParameters.AddQueryString("stats", value); }
		}
		
		
		///<summary>Specify which field to use for suggestions</summary>
		public PropertyPathMarker SuggestField 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<PropertyPathMarker>("suggest_field"); } 
			set { this.Request.RequestParameters.AddQueryString("suggest_field", value); }
		}
		
		
		///<summary>Specify suggest mode</summary>
		public SuggestMode SuggestMode 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<SuggestMode>("suggest_mode"); } 
			set { this.Request.RequestParameters.AddQueryString("suggest_mode", value); }
		}
		
		
		///<summary>How many suggestions to return in response</summary>
		public long SuggestSize 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<long>("suggest_size"); } 
			set { this.Request.RequestParameters.AddQueryString("suggest_size", value); }
		}
		
		
		///<summary>The source text for which the suggestions should be returned</summary>
		public string SuggestText 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("suggest_text"); } 
			set { this.Request.RequestParameters.AddQueryString("suggest_text", value); }
		}
		
	}
	
		
	///<summary>Request parameters for SearchShardsGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html
	///</pre>
	///</summary>
	public partial class SearchShardsRequest  : BasePathRequest<SearchShardsRequestParameters>
			{
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("preference"); } 
			set { this.Request.RequestParameters.AddQueryString("preference", value); }
		}
		
		
		///<summary>Specific routing value</summary>
		public string Routing 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("routing"); } 
			set { this.Request.RequestParameters.AddQueryString("routing", value); }
		}
		
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("local"); } 
			set { this.Request.RequestParameters.AddQueryString("local", value); }
		}
		
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_unavailable"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_unavailable", value); }
		}
		
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("allow_no_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("allow_no_indices", value); }
		}
		
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ExpandWildcards>("expand_wildcards"); } 
			set { this.Request.RequestParameters.AddQueryString("expand_wildcards", value); }
		}
		

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<SearchShardsRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}

	}
	
		
	///<summary>Request parameters for SearchTemplateGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html
	///</pre>
	///</summary>
	public partial class SearchTemplateRequest  : BasePathRequest<SearchTemplateRequestParameters>
			{
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_unavailable"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_unavailable", value); }
		}
		
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("allow_no_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("allow_no_indices", value); }
		}
		
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ExpandWildcards>("expand_wildcards"); } 
			set { this.Request.RequestParameters.AddQueryString("expand_wildcards", value); }
		}
		
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("preference"); } 
			set { this.Request.RequestParameters.AddQueryString("preference", value); }
		}
		
		
		///<summary>A comma-separated list of specific routing values</summary>
		public  string[] Routing 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("routing"); } 
			set { this.Request.RequestParameters.AddQueryString("routing", value); }
		}
		
		
		///<summary>Specify how long a consistent view of the index should be maintained for scrolled search</summary>
		public string Scroll 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("scroll"); } 
			set { this.Request.RequestParameters.AddQueryString("scroll", value); }
		}
		
		
		///<summary>Search operation type</summary>
		public SearchType SearchType 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<SearchType>("search_type"); } 
			set { this.Request.RequestParameters.AddQueryString("search_type", value); }
		}
		

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<SearchTemplateRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}

	}
	
		
	///<summary>Request parameters for SnapshotCreate
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html
	///</pre>
	///</summary>
	public partial class SnapshotRequest 
			{
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
		
		///<summary>Should this request wait until the operation has completed before returning</summary>
		public bool WaitForCompletion 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("wait_for_completion"); } 
			set { this.Request.RequestParameters.AddQueryString("wait_for_completion", value); }
		}
		
	}
	
		
	///<summary>Request parameters for SnapshotCreateRepository
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html
	///</pre>
	///</summary>
	public partial class CreateRepositoryRequest 
			{
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("timeout", value); }
		}
		
	}
	
		
	///<summary>Request parameters for SnapshotDelete
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html
	///</pre>
	///</summary>
	public partial class DeleteSnapshotRequest 
			{
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
	}
	
		
	///<summary>Request parameters for SnapshotDeleteRepository
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html
	///</pre>
	///</summary>
	public partial class DeleteRepositoryRequest 
			{
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("timeout", value); }
		}
		
	}
	
		
	///<summary>Request parameters for SnapshotGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html
	///</pre>
	///</summary>
	public partial class GetSnapshotRequest 
			{
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
	}
	
		
	///<summary>Request parameters for SnapshotGetRepository
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html
	///</pre>
	///</summary>
	public partial class SnapshotGetRepositoryRequest  : BasePathRequest<SnapshotGetRepositoryRequestParameters>
			{
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("local"); } 
			set { this.Request.RequestParameters.AddQueryString("local", value); }
		}
		

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<SnapshotGetRepositoryRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}

	}
	
		
	///<summary>Request parameters for SnapshotRestore
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html
	///</pre>
	///</summary>
	public partial class RestoreRequest 
			{
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
		
		///<summary>Should this request wait until the operation has completed before returning</summary>
		public bool WaitForCompletion 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("wait_for_completion"); } 
			set { this.Request.RequestParameters.AddQueryString("wait_for_completion", value); }
		}
		
	}
	
		
	///<summary>Request parameters for SnapshotStatus
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/modules-snapshots.html
	///</pre>
	///</summary>
	public partial class SnapshotStatusRequest  : BasePathRequest<SnapshotStatusRequestParameters>
			{
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<SnapshotStatusRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}

	}
	
		
	///<summary>Request parameters for Suggest
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html
	///</pre>
	///</summary>
	public partial class SuggestRequest 
			{
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_unavailable"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_unavailable", value); }
		}
		
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("allow_no_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("allow_no_indices", value); }
		}
		
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ExpandWildcards>("expand_wildcards"); } 
			set { this.Request.RequestParameters.AddQueryString("expand_wildcards", value); }
		}
		
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("preference"); } 
			set { this.Request.RequestParameters.AddQueryString("preference", value); }
		}
		
		
		///<summary>Specific routing value</summary>
		public string Routing 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("routing"); } 
			set { this.Request.RequestParameters.AddQueryString("routing", value); }
		}
		
		
		///<summary>The URL-encoded request definition (instead of using request body)</summary>
		public string Source 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("source"); } 
			set { this.Request.RequestParameters.AddQueryString("source", value); }
		}
		
	}
	
		
	///<summary>Request parameters for TermvectorGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-termvectors.html
	///</pre>
	///</summary>
	public partial class TermvectorRequest<T> 
			{
		
		///<summary>Specifies if total term frequency and document frequency should be returned.</summary>
		public bool TermStatistics 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("term_statistics"); } 
			set { this.Request.RequestParameters.AddQueryString("term_statistics", value); }
		}
		
		
		///<summary>Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.</summary>
		public bool FieldStatistics 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("field_statistics"); } 
			set { this.Request.RequestParameters.AddQueryString("field_statistics", value); }
		}
		
		
		///<summary>A comma-separated list of fields to return.</summary>
		public IList<PropertyPathMarker> Fields 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<IList<PropertyPathMarker>>("fields"); } 
			set { this.Request.RequestParameters.AddQueryString("fields", value); }
		}
		
		
		///<summary>Specifies if term offsets should be returned.</summary>
		public bool Offsets 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("offsets"); } 
			set { this.Request.RequestParameters.AddQueryString("offsets", value); }
		}
		
		
		///<summary>Specifies if term positions should be returned.</summary>
		public bool Positions 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("positions"); } 
			set { this.Request.RequestParameters.AddQueryString("positions", value); }
		}
		
		
		///<summary>Specifies if term payloads should be returned.</summary>
		public bool Payloads 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("payloads"); } 
			set { this.Request.RequestParameters.AddQueryString("payloads", value); }
		}
		
		
		///<summary>Specify the node or shard the operation should be performed on (default: random).</summary>
		public string Preference 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("preference"); } 
			set { this.Request.RequestParameters.AddQueryString("preference", value); }
		}
		
		
		///<summary>Specific routing value.</summary>
		public string Routing 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("routing"); } 
			set { this.Request.RequestParameters.AddQueryString("routing", value); }
		}
		
		
		///<summary>Parent id of documents.</summary>
		public string Parent 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("parent"); } 
			set { this.Request.RequestParameters.AddQueryString("parent", value); }
		}
		
	}
	
		
	///<summary>Request parameters for Update
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-update.html
	///</pre>
	///</summary>
	public partial class UpdateRequest<TUpsert,TDocument> 
			{
		
		///<summary>Explicit write consistency setting for the operation</summary>
		public Consistency Consistency 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<Consistency>("consistency"); } 
			set { this.Request.RequestParameters.AddQueryString("consistency", value); }
		}
		
		
		///<summary>The script language (default: mvel)</summary>
		public string Lang 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("lang"); } 
			set { this.Request.RequestParameters.AddQueryString("lang", value); }
		}
		
		
		///<summary>ID of the parent document</summary>
		public string Parent 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("parent"); } 
			set { this.Request.RequestParameters.AddQueryString("parent", value); }
		}
		
		
		///<summary>Refresh the index after performing the operation</summary>
		public bool Refresh 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("refresh"); } 
			set { this.Request.RequestParameters.AddQueryString("refresh", value); }
		}
		
		
		///<summary>Specific replication type</summary>
		public Replication Replication 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<Replication>("replication"); } 
			set { this.Request.RequestParameters.AddQueryString("replication", value); }
		}
		
		
		///<summary>Specify how many times should the operation be retried when a conflict occurs (default: 0)</summary>
		public long RetryOnConflict 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<long>("retry_on_conflict"); } 
			set { this.Request.RequestParameters.AddQueryString("retry_on_conflict", value); }
		}
		
		
		///<summary>Specific routing value</summary>
		public string Routing 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("routing"); } 
			set { this.Request.RequestParameters.AddQueryString("routing", value); }
		}
		
		
		///<summary>The URL-encoded script definition (instead of using request body)</summary>
		public string ScriptQueryString 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("script"); } 
			set { this.Request.RequestParameters.AddQueryString("script", value); }
		}
		
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("timeout", value); }
		}
		
		
		///<summary>Explicit timestamp for the document</summary>
		public string Timestamp 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("timestamp"); } 
			set { this.Request.RequestParameters.AddQueryString("timestamp", value); }
		}
		
		
		///<summary>Expiration time for the document</summary>
		public string Ttl 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("ttl"); } 
			set { this.Request.RequestParameters.AddQueryString("ttl", value); }
		}
		
		
		///<summary>Explicit version number for concurrency control</summary>
		public long Version 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<long>("version"); } 
			set { this.Request.RequestParameters.AddQueryString("version", value); }
		}
		
		
		///<summary>Specific version type</summary>
		public VersionType VersionType 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<VersionType>("version_type"); } 
			set { this.Request.RequestParameters.AddQueryString("version_type", value); }
		}
		
	}
	
		
	///<summary>Request parameters for Count
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html
	///</pre>
	///</summary>
	public partial class CountRequest 
			{
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_unavailable"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_unavailable", value); }
		}
		
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("allow_no_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("allow_no_indices", value); }
		}
		
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ExpandWildcards>("expand_wildcards"); } 
			set { this.Request.RequestParameters.AddQueryString("expand_wildcards", value); }
		}
		
		
		///<summary>Include only documents with a specific `_score` value in the result</summary>
		public double MinScore 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<double>("min_score"); } 
			set { this.Request.RequestParameters.AddQueryString("min_score", value); }
		}
		
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("preference"); } 
			set { this.Request.RequestParameters.AddQueryString("preference", value); }
		}
		
		
		///<summary>Specific routing value</summary>
		public string Routing 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("routing"); } 
			set { this.Request.RequestParameters.AddQueryString("routing", value); }
		}
		
		
		///<summary>The URL-encoded query definition (instead of using the request body)</summary>
		public string Source 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("source"); } 
			set { this.Request.RequestParameters.AddQueryString("source", value); }
		}
		
	}
	
		
	///<summary>Request parameters for Delete
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete.html
	///</pre>
	///</summary>
	public partial class DeleteRequest 
			{
		
		///<summary>Specific write consistency setting for the operation</summary>
		public Consistency Consistency 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<Consistency>("consistency"); } 
			set { this.Request.RequestParameters.AddQueryString("consistency", value); }
		}
		
		
		///<summary>ID of parent document</summary>
		public string Parent 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("parent"); } 
			set { this.Request.RequestParameters.AddQueryString("parent", value); }
		}
		
		
		///<summary>Refresh the index after performing the operation</summary>
		public bool Refresh 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("refresh"); } 
			set { this.Request.RequestParameters.AddQueryString("refresh", value); }
		}
		
		
		///<summary>Specific replication type</summary>
		public Replication Replication 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<Replication>("replication"); } 
			set { this.Request.RequestParameters.AddQueryString("replication", value); }
		}
		
		
		///<summary>Specific routing value</summary>
		public string Routing 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("routing"); } 
			set { this.Request.RequestParameters.AddQueryString("routing", value); }
		}
		
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("timeout", value); }
		}
		
		
		///<summary>Explicit version number for concurrency control</summary>
		public long Version 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<long>("version"); } 
			set { this.Request.RequestParameters.AddQueryString("version", value); }
		}
		
		
		///<summary>Specific version type</summary>
		public VersionType VersionType 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<VersionType>("version_type"); } 
			set { this.Request.RequestParameters.AddQueryString("version_type", value); }
		}
		
	}
	
		
	///<summary>Request parameters for DeleteByQuery
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete-by-query.html
	///</pre>
	///</summary>
	public partial class DeleteByQueryRequest 
			{
		
		///<summary>The analyzer to use for the query string</summary>
		public string Analyzer 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("analyzer"); } 
			set { this.Request.RequestParameters.AddQueryString("analyzer", value); }
		}
		
		
		///<summary>Specific write consistency setting for the operation</summary>
		public Consistency Consistency 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<Consistency>("consistency"); } 
			set { this.Request.RequestParameters.AddQueryString("consistency", value); }
		}
		
		
		///<summary>The default operator for query string query (AND or OR)</summary>
		public DefaultOperator DefaultOperator 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<DefaultOperator>("default_operator"); } 
			set { this.Request.RequestParameters.AddQueryString("default_operator", value); }
		}
		
		
		///<summary>The field to use as default where no field prefix is given in the query string</summary>
		public string Df 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("df"); } 
			set { this.Request.RequestParameters.AddQueryString("df", value); }
		}
		
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_unavailable"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_unavailable", value); }
		}
		
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("allow_no_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("allow_no_indices", value); }
		}
		
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ExpandWildcards>("expand_wildcards"); } 
			set { this.Request.RequestParameters.AddQueryString("expand_wildcards", value); }
		}
		
		
		///<summary>Specific replication type</summary>
		public Replication Replication 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<Replication>("replication"); } 
			set { this.Request.RequestParameters.AddQueryString("replication", value); }
		}
		
		
		///<summary>Query in the Lucene query string syntax</summary>
		public string Q 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("q"); } 
			set { this.Request.RequestParameters.AddQueryString("q", value); }
		}
		
		
		///<summary>Specific routing value</summary>
		public string Routing 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("routing"); } 
			set { this.Request.RequestParameters.AddQueryString("routing", value); }
		}
		
		
		///<summary>The URL-encoded query definition (instead of using the request body)</summary>
		public string Source 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("source"); } 
			set { this.Request.RequestParameters.AddQueryString("source", value); }
		}
		
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("timeout", value); }
		}
		
	}
	
		
	///<summary>Request parameters for Exists
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html
	///</pre>
	///</summary>
	public partial class DocumentExistsRequest 
			{
		
		///<summary>The ID of the parent document</summary>
		public string Parent 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("parent"); } 
			set { this.Request.RequestParameters.AddQueryString("parent", value); }
		}
		
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("preference"); } 
			set { this.Request.RequestParameters.AddQueryString("preference", value); }
		}
		
		
		///<summary>Specify whether to perform the operation in realtime or search mode</summary>
		public bool Realtime 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("realtime"); } 
			set { this.Request.RequestParameters.AddQueryString("realtime", value); }
		}
		
		
		///<summary>Refresh the shard containing the document before performing the operation</summary>
		public bool Refresh 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("refresh"); } 
			set { this.Request.RequestParameters.AddQueryString("refresh", value); }
		}
		
		
		///<summary>Specific routing value</summary>
		public string Routing 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("routing"); } 
			set { this.Request.RequestParameters.AddQueryString("routing", value); }
		}
		
	}
	
		
	///<summary>Request parameters for Get
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html
	///</pre>
	///</summary>
	public partial class GetRequest 
			{
		
		///<summary>A comma-separated list of fields to return in the response</summary>
		public IList<PropertyPathMarker> Fields 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<IList<PropertyPathMarker>>("fields"); } 
			set { this.Request.RequestParameters.AddQueryString("fields", value); }
		}
		
		
		///<summary>The ID of the parent document</summary>
		public string Parent 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("parent"); } 
			set { this.Request.RequestParameters.AddQueryString("parent", value); }
		}
		
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("preference"); } 
			set { this.Request.RequestParameters.AddQueryString("preference", value); }
		}
		
		
		///<summary>Specify whether to perform the operation in realtime or search mode</summary>
		public bool Realtime 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("realtime"); } 
			set { this.Request.RequestParameters.AddQueryString("realtime", value); }
		}
		
		
		///<summary>Refresh the shard containing the document before performing the operation</summary>
		public bool Refresh 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("refresh"); } 
			set { this.Request.RequestParameters.AddQueryString("refresh", value); }
		}
		
		
		///<summary>Specific routing value</summary>
		public string Routing 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("routing"); } 
			set { this.Request.RequestParameters.AddQueryString("routing", value); }
		}
		
		
		///<summary>True or false to return the _source field or not, or a list of fields to return</summary>
		public  string[] _Source 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("_source"); } 
			set { this.Request.RequestParameters.AddQueryString("_source", value); }
		}
		
		
		///<summary>A list of fields to exclude from the returned _source field</summary>
		public IList<PropertyPathMarker> _SourceExclude 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<IList<PropertyPathMarker>>("_source_exclude"); } 
			set { this.Request.RequestParameters.AddQueryString("_source_exclude", value); }
		}
		
		
		///<summary>A list of fields to extract and return from the _source field</summary>
		public IList<PropertyPathMarker> _SourceInclude 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<IList<PropertyPathMarker>>("_source_include"); } 
			set { this.Request.RequestParameters.AddQueryString("_source_include", value); }
		}
		
		
		///<summary>Explicit version number for concurrency control</summary>
		public long Version 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<long>("version"); } 
			set { this.Request.RequestParameters.AddQueryString("version", value); }
		}
		
		
		///<summary>Specific version type</summary>
		public VersionType VersionType 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<VersionType>("version_type"); } 
			set { this.Request.RequestParameters.AddQueryString("version_type", value); }
		}
		
	}
	
		
	///<summary>Request parameters for GetSource
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html
	///</pre>
	///</summary>
	public partial class SourceRequest 
			{
		
		///<summary>The ID of the parent document</summary>
		public string Parent 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("parent"); } 
			set { this.Request.RequestParameters.AddQueryString("parent", value); }
		}
		
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("preference"); } 
			set { this.Request.RequestParameters.AddQueryString("preference", value); }
		}
		
		
		///<summary>Specify whether to perform the operation in realtime or search mode</summary>
		public bool Realtime 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("realtime"); } 
			set { this.Request.RequestParameters.AddQueryString("realtime", value); }
		}
		
		
		///<summary>Refresh the shard containing the document before performing the operation</summary>
		public bool Refresh 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("refresh"); } 
			set { this.Request.RequestParameters.AddQueryString("refresh", value); }
		}
		
		
		///<summary>Specific routing value</summary>
		public string Routing 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("routing"); } 
			set { this.Request.RequestParameters.AddQueryString("routing", value); }
		}
		
		
		///<summary>True or false to return the _source field or not, or a list of fields to return</summary>
		public  string[] _Source 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("_source"); } 
			set { this.Request.RequestParameters.AddQueryString("_source", value); }
		}
		
		
		///<summary>A list of fields to exclude from the returned _source field</summary>
		public IList<PropertyPathMarker> _SourceExclude 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<IList<PropertyPathMarker>>("_source_exclude"); } 
			set { this.Request.RequestParameters.AddQueryString("_source_exclude", value); }
		}
		
		
		///<summary>A list of fields to extract and return from the _source field</summary>
		public IList<PropertyPathMarker> _SourceInclude 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<IList<PropertyPathMarker>>("_source_include"); } 
			set { this.Request.RequestParameters.AddQueryString("_source_include", value); }
		}
		
		
		///<summary>Explicit version number for concurrency control</summary>
		public long Version 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<long>("version"); } 
			set { this.Request.RequestParameters.AddQueryString("version", value); }
		}
		
		
		///<summary>Specific version type</summary>
		public VersionType VersionType 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<VersionType>("version_type"); } 
			set { this.Request.RequestParameters.AddQueryString("version_type", value); }
		}
		
	}
	
		
	///<summary>Request parameters for IndicesDeleteMapping
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-delete-mapping.html
	///</pre>
	///</summary>
	public partial class DeleteMappingRequest 
			{
		
		///<summary>Specify timeout for connection to master</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
	}
	
		
	///<summary>Request parameters for IndicesGetMappingForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html
	///</pre>
	///</summary>
	public partial class GetMappingRequest 
			{
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_unavailable"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_unavailable", value); }
		}
		
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("allow_no_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("allow_no_indices", value); }
		}
		
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ExpandWildcards>("expand_wildcards"); } 
			set { this.Request.RequestParameters.AddQueryString("expand_wildcards", value); }
		}
		
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("local"); } 
			set { this.Request.RequestParameters.AddQueryString("local", value); }
		}
		
	}
	
		
	///<summary>Request parameters for IndicesPutMapping
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html
	///</pre>
	///</summary>
	public partial class PutMappingRequest 
			{
		
		///<summary>Specify whether to ignore conflicts while updating the mapping (default: false)</summary>
		public bool IgnoreConflicts 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_conflicts"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_conflicts", value); }
		}
		
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("timeout", value); }
		}
		
		
		///<summary>Specify timeout for connection to master</summary>
		public string MasterTimeout 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("master_timeout"); } 
			set { this.Request.RequestParameters.AddQueryString("master_timeout", value); }
		}
		
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_unavailable"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_unavailable", value); }
		}
		
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("allow_no_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("allow_no_indices", value); }
		}
		
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ExpandWildcards>("expand_wildcards"); } 
			set { this.Request.RequestParameters.AddQueryString("expand_wildcards", value); }
		}
		
	}
	
		
	///<summary>Request parameters for IndicesValidateQueryGetForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html
	///</pre>
	///</summary>
	public partial class ValidateQueryRequest 
			{
		
		///<summary>Return detailed information about the error</summary>
		public bool Explain 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("explain"); } 
			set { this.Request.RequestParameters.AddQueryString("explain", value); }
		}
		
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_unavailable"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_unavailable", value); }
		}
		
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("allow_no_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("allow_no_indices", value); }
		}
		
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ExpandWildcards>("expand_wildcards"); } 
			set { this.Request.RequestParameters.AddQueryString("expand_wildcards", value); }
		}
		
		
		///<summary>TODO: ?</summary>
		public string OperationThreading 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("operation_threading"); } 
			set { this.Request.RequestParameters.AddQueryString("operation_threading", value); }
		}
		
		
		///<summary>The URL-encoded query definition (instead of using the request body)</summary>
		public string Source 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("source"); } 
			set { this.Request.RequestParameters.AddQueryString("source", value); }
		}
		
		
		///<summary>Query in the Lucene query string syntax</summary>
		public string Q 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("q"); } 
			set { this.Request.RequestParameters.AddQueryString("q", value); }
		}
		
	}
	
		
	///<summary>Request parameters for MltGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-more-like-this.html
	///</pre>
	///</summary>
	public partial class MoreLikeThisRequest 
			{
		
		///<summary>The boost factor</summary>
		public double BoostTerms 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<double>("boost_terms"); } 
			set { this.Request.RequestParameters.AddQueryString("boost_terms", value); }
		}
		
		
		///<summary>The word occurrence frequency as count: words with higher occurrence in the corpus will be ignored</summary>
		public long MaxDocFreq 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<long>("max_doc_freq"); } 
			set { this.Request.RequestParameters.AddQueryString("max_doc_freq", value); }
		}
		
		
		///<summary>The maximum query terms to be included in the generated query</summary>
		public long MaxQueryTerms 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<long>("max_query_terms"); } 
			set { this.Request.RequestParameters.AddQueryString("max_query_terms", value); }
		}
		
		
		///<summary>The minimum length of the word: longer words will be ignored</summary>
		public long MaxWordLength 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<long>("max_word_length"); } 
			set { this.Request.RequestParameters.AddQueryString("max_word_length", value); }
		}
		
		
		///<summary>The word occurrence frequency as count: words with lower occurrence in the corpus will be ignored</summary>
		public long MinDocFreq 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<long>("min_doc_freq"); } 
			set { this.Request.RequestParameters.AddQueryString("min_doc_freq", value); }
		}
		
		
		///<summary>The term frequency as percent: terms with lower occurence in the source document will be ignored</summary>
		public long MinTermFreq 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<long>("min_term_freq"); } 
			set { this.Request.RequestParameters.AddQueryString("min_term_freq", value); }
		}
		
		
		///<summary>The minimum length of the word: shorter words will be ignored</summary>
		public long MinWordLength 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<long>("min_word_length"); } 
			set { this.Request.RequestParameters.AddQueryString("min_word_length", value); }
		}
		
		
		///<summary>Specific fields to perform the query against</summary>
		public IList<PropertyPathMarker> MltFields 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<IList<PropertyPathMarker>>("mlt_fields"); } 
			set { this.Request.RequestParameters.AddQueryString("mlt_fields", value); }
		}
		
		
		///<summary>How many terms have to match in order to consider the document a match (default: 0.3)</summary>
		public double PercentTermsToMatch 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<double>("percent_terms_to_match"); } 
			set { this.Request.RequestParameters.AddQueryString("percent_terms_to_match", value); }
		}
		
		
		///<summary>Specific routing value</summary>
		public string Routing 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("routing"); } 
			set { this.Request.RequestParameters.AddQueryString("routing", value); }
		}
		
		
		///<summary>The offset from which to return results</summary>
		public long SearchFrom 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<long>("search_from"); } 
			set { this.Request.RequestParameters.AddQueryString("search_from", value); }
		}
		
		
		///<summary>A comma-separated list of indices to perform the query against (default: the index containing the document)</summary>
		public  string[] SearchIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("search_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("search_indices", value); }
		}
		
		
		///<summary>The search query hint</summary>
		public string SearchQueryHint 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("search_query_hint"); } 
			set { this.Request.RequestParameters.AddQueryString("search_query_hint", value); }
		}
		
		
		///<summary>A scroll search request definition</summary>
		public string SearchScroll 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("search_scroll"); } 
			set { this.Request.RequestParameters.AddQueryString("search_scroll", value); }
		}
		
		
		///<summary>The number of documents to return (default: 10)</summary>
		public long SearchSize 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<long>("search_size"); } 
			set { this.Request.RequestParameters.AddQueryString("search_size", value); }
		}
		
		
		///<summary>A specific search request definition (instead of using the request body)</summary>
		public string SearchSource 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("search_source"); } 
			set { this.Request.RequestParameters.AddQueryString("search_source", value); }
		}
		
		
		///<summary>Specific search type (eg. `dfs_then_fetch`, `count`, etc)</summary>
		public string SearchType 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("search_type"); } 
			set { this.Request.RequestParameters.AddQueryString("search_type", value); }
		}
		
		
		///<summary>A comma-separated list of types to perform the query against (default: the same type as the document)</summary>
		public  string[] SearchTypes 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("search_types"); } 
			set { this.Request.RequestParameters.AddQueryString("search_types", value); }
		}
		
		
		///<summary>A list of stop words to be ignored</summary>
		public  string[] StopWords 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("stop_words"); } 
			set { this.Request.RequestParameters.AddQueryString("stop_words", value); }
		}
		
	}
	
		
	///<summary>Request parameters for SearchGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html
	///</pre>
	///</summary>
	public partial class SearchRequest 
			{
		
		///<summary>The analyzer to use for the query string</summary>
		public string Analyzer 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("analyzer"); } 
			set { this.Request.RequestParameters.AddQueryString("analyzer", value); }
		}
		
		
		///<summary>Specify whether wildcard and prefix queries should be analyzed (default: false)</summary>
		public bool AnalyzeWildcard 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("analyze_wildcard"); } 
			set { this.Request.RequestParameters.AddQueryString("analyze_wildcard", value); }
		}
		
		
		///<summary>The default operator for query string query (AND or OR)</summary>
		public DefaultOperator DefaultOperator 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<DefaultOperator>("default_operator"); } 
			set { this.Request.RequestParameters.AddQueryString("default_operator", value); }
		}
		
		
		///<summary>The field to use as default where no field prefix is given in the query string</summary>
		public string Df 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("df"); } 
			set { this.Request.RequestParameters.AddQueryString("df", value); }
		}
		
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("ignore_unavailable"); } 
			set { this.Request.RequestParameters.AddQueryString("ignore_unavailable", value); }
		}
		
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("allow_no_indices"); } 
			set { this.Request.RequestParameters.AddQueryString("allow_no_indices", value); }
		}
		
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<ExpandWildcards>("expand_wildcards"); } 
			set { this.Request.RequestParameters.AddQueryString("expand_wildcards", value); }
		}
		
		
		///<summary>Specify whether format-based query failures (such as providing text to a numeric field) should be ignored</summary>
		public bool Lenient 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("lenient"); } 
			set { this.Request.RequestParameters.AddQueryString("lenient", value); }
		}
		
		
		///<summary>Specify whether query terms should be lowercased</summary>
		public bool LowercaseExpandedTerms 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("lowercase_expanded_terms"); } 
			set { this.Request.RequestParameters.AddQueryString("lowercase_expanded_terms", value); }
		}
		
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("preference"); } 
			set { this.Request.RequestParameters.AddQueryString("preference", value); }
		}
		
		
		///<summary>A comma-separated list of specific routing values</summary>
		public  string[] Routing 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("routing"); } 
			set { this.Request.RequestParameters.AddQueryString("routing", value); }
		}
		
		
		///<summary>Specify how long a consistent view of the index should be maintained for scrolled search</summary>
		public string Scroll 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("scroll"); } 
			set { this.Request.RequestParameters.AddQueryString("scroll", value); }
		}
		
		
		///<summary>Search operation type</summary>
		public SearchType SearchType 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<SearchType>("search_type"); } 
			set { this.Request.RequestParameters.AddQueryString("search_type", value); }
		}
		
		
		///<summary>Specific &#39;tag&#39; of the request for logging and statistical purposes</summary>
		public  string[] Stats 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue< string[]>("stats"); } 
			set { this.Request.RequestParameters.AddQueryString("stats", value); }
		}
		
		
		///<summary>Specify which field to use for suggestions</summary>
		public PropertyPathMarker SuggestField 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<PropertyPathMarker>("suggest_field"); } 
			set { this.Request.RequestParameters.AddQueryString("suggest_field", value); }
		}
		
		
		///<summary>Specify suggest mode</summary>
		public SuggestMode SuggestMode 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<SuggestMode>("suggest_mode"); } 
			set { this.Request.RequestParameters.AddQueryString("suggest_mode", value); }
		}
		
		
		///<summary>How many suggestions to return in response</summary>
		public long SuggestSize 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<long>("suggest_size"); } 
			set { this.Request.RequestParameters.AddQueryString("suggest_size", value); }
		}
		
		
		///<summary>The source text for which the suggestions should be returned</summary>
		public string SuggestText 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("suggest_text"); } 
			set { this.Request.RequestParameters.AddQueryString("suggest_text", value); }
		}
		
	}
	
		
	///<summary>Request parameters for TermvectorGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-termvectors.html
	///</pre>
	///</summary>
	public partial class TermvectorRequest 
			{
		
		///<summary>Specifies if total term frequency and document frequency should be returned.</summary>
		public bool TermStatistics 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("term_statistics"); } 
			set { this.Request.RequestParameters.AddQueryString("term_statistics", value); }
		}
		
		
		///<summary>Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.</summary>
		public bool FieldStatistics 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("field_statistics"); } 
			set { this.Request.RequestParameters.AddQueryString("field_statistics", value); }
		}
		
		
		///<summary>A comma-separated list of fields to return.</summary>
		public IList<PropertyPathMarker> Fields 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<IList<PropertyPathMarker>>("fields"); } 
			set { this.Request.RequestParameters.AddQueryString("fields", value); }
		}
		
		
		///<summary>Specifies if term offsets should be returned.</summary>
		public bool Offsets 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("offsets"); } 
			set { this.Request.RequestParameters.AddQueryString("offsets", value); }
		}
		
		
		///<summary>Specifies if term positions should be returned.</summary>
		public bool Positions 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("positions"); } 
			set { this.Request.RequestParameters.AddQueryString("positions", value); }
		}
		
		
		///<summary>Specifies if term payloads should be returned.</summary>
		public bool Payloads 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<bool>("payloads"); } 
			set { this.Request.RequestParameters.AddQueryString("payloads", value); }
		}
		
		
		///<summary>Specify the node or shard the operation should be performed on (default: random).</summary>
		public string Preference 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("preference"); } 
			set { this.Request.RequestParameters.AddQueryString("preference", value); }
		}
		
		
		///<summary>Specific routing value.</summary>
		public string Routing 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("routing"); } 
			set { this.Request.RequestParameters.AddQueryString("routing", value); }
		}
		
		
		///<summary>Parent id of documents.</summary>
		public string Parent 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue<string>("parent"); } 
			set { this.Request.RequestParameters.AddQueryString("parent", value); }
		}
		
	}
	
	
}
 